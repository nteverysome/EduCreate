'use client';

import React, { useState, useEffect, useCallback } from 'react';
import {
  FolderIcon,
  TrashIcon,
  MagnifyingGlassIcon
} from '@heroicons/react/24/outline';
import WordwallStyleResultCard from './WordwallStyleResultCard';
import WordwallStyleFolderCard from './WordwallStyleFolderCard';
import DraggableResultCard from './DraggableResultCard';
import DroppableFolderCard from './DroppableFolderCard';
import { DragDropProvider } from './DragDropContext';
import DragToRootArea from './DragToRootArea';
import NewFolderModal from './NewFolderModal';
import FolderContextMenu from './FolderContextMenu';
import DeleteConfirmModal from './DeleteConfirmModal';
import { RecycleBinModal } from './RecycleBinModal';
import RenameFolderModal from './RenameFolderModal';


interface AssignmentResult {
  id: string;
  title: string;
  activityName: string;
  participantCount: number;
  createdAt: string;
  deadline?: string;
  status: 'active' | 'completed' | 'expired';
  folderId?: string;
  assignmentId: string;
  activityId: string;
}

interface ResultFolder {
  id: string;
  name: string;
  resultCount: number;
  createdAt: string;
  color?: string;
}

interface WordwallStyleMyResultsProps {
  userId: string;
}

export const WordwallStyleMyResults: React.FC<WordwallStyleMyResultsProps> = ({
  userId
}) => {
  // ÁãÄÊÖãÁÆ°ÁêÜ
  const [results, setResults] = useState<AssignmentResult[]>([]);
  const [folders, setFolders] = useState<ResultFolder[]>([]);
  const [currentFolderId, setCurrentFolderId] = useState<string | null>(null);
  const [searchQuery, setSearchQuery] = useState('');
  const [sortBy, setSortBy] = useState<'created' | 'deadline' | 'name'>('created');
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState<string | null>(null);
  const [showNewFolderModal, setShowNewFolderModal] = useState(false);
  const [showRecycleBin, setShowRecycleBin] = useState(false);
  const [showRenameFolderModal, setShowRenameFolderModal] = useState(false);
  const [renamingFolder, setRenamingFolder] = useState<ResultFolder | null>(null);
  // const [activeId, setActiveId] = useState<string | null>(null);

  // Âº∫Âà∂Âà∑Êñ∞Êú∫Âà∂
  const [forceRefreshCounter, setForceRefreshCounter] = useState(0);
  const forceRefresh = useCallback(() => {
    console.log('üîÑ ÊâßË°åÂº∫Âà∂Âà∑Êñ∞...');
    setForceRefreshCounter(prev => prev + 1);
  }, []);

  // ËèúÂçïÂíåÂà†Èô§Áõ∏ÂÖ≥Áä∂ÊÄÅ
  const [contextMenu, setContextMenu] = useState<{
    folder: ResultFolder;
    x: number;
    y: number;
  } | null>(null);
  const [showDeleteModal, setShowDeleteModal] = useState(false);
  const [folderToDelete, setFolderToDelete] = useState<ResultFolder | null>(null);





  // ËºâÂÖ•ÁµêÊûúÊï∏Êìö
  const loadResults = useCallback(async () => {
    setLoading(true);
    setError(null);

    try {
      // Ë™øÁî®ÁúüÂØ¶ API - Ê†πÊçÆ currentFolderId Ëé∑ÂèñÂØπÂ∫îÁöÑÁªìÊûú
      const folderId = currentFolderId || 'null';
      console.log('üîç loadResults Ë∞ÉÁî®:', { currentFolderId, folderId });
      const response = await fetch(`/api/results?folderId=${folderId}`);
      if (response.ok) {
        const data = await response.json();
        console.log('‚úÖ API ÂìçÂ∫îÊàêÂäü:', { count: data.length, data });
        setResults(data);
      } else {
        console.error('ËºâÂÖ•ÁµêÊûúÂ§±Êïó:', response.status);
        // Â¶ÇÊûú API Â§±ÊïóÔºå‰ΩøÁî®Ê®°Êì¨Êï∏Êìö‰ΩúÁÇ∫ÂæåÂÇô
        const mockResults: AssignmentResult[] = [
          {
            id: '1',
            title: '"ÂúãÂ∞èÂçó‰∏Ä‰∏âÂπ¥Á¥öËã±ÊñáÁ¨¨2Ë™≤"ÁöÑÁµêÊûú3',
            activityName: 'ÂúãÂ∞èÂçó‰∏Ä‰∏âÂπ¥Á¥öËã±ÊñáÁ¨¨2Ë™≤',
            participantCount: 0,
            createdAt: '2025-10-13T00:52:00Z',
            status: 'active',
            assignmentId: 'assignment2',
            activityId: 'activity2'
          },
          {
            id: '2',
            title: '"ÂúãÂ∞èÂçó‰∏Ä‰∏âÂπ¥Á¥öËã±ÊñáÁ¨¨2Ë™≤"ÁöÑÁµêÊûú2',
            activityName: 'ÂúãÂ∞èÂçó‰∏Ä‰∏âÂπ¥Á¥öËã±ÊñáÁ¨¨2Ë™≤',
            participantCount: 0,
            createdAt: '2025-10-13T00:51:00Z',
            status: 'active',
            assignmentId: 'assignment3',
            activityId: 'activity3'
          },
          {
            id: '3',
            title: '"Ë§áË£ΩÁÑ°Ê®ôÈ°å43"ÁöÑÁµêÊûú1',
            activityName: 'Ë§áË£ΩÁÑ°Ê®ôÈ°å43',
            participantCount: 1,
            createdAt: '2025-10-13T00:10:00Z',
            status: 'active',
            assignmentId: 'assignment1',
            activityId: 'activity1'
          }
        ];
        setResults(mockResults);
      }

      // ËºâÂÖ•ÁúüÂØ¶Ë≥áÊñôÂ§æÊï∏Êìö
      try {
        const foldersResponse = await fetch('/api/folders');
        if (foldersResponse.ok) {
          const foldersData = await foldersResponse.json();
          const formattedFolders: ResultFolder[] = foldersData.map((folder: any) => ({
            id: folder.id,
            name: folder.name,
            resultCount: folder.activityCount || 0,
            createdAt: folder.createdAt,
            color: folder.color
          }));
          setFolders(formattedFolders);
        } else {
          console.log('ÁÑ°Ê≥ïËºâÂÖ•Ë≥áÊñôÂ§æÔºå‰ΩøÁî®Á©∫ÂàóË°®');
          setFolders([]);
        }
      } catch (error) {
        console.error('ËºâÂÖ•Ë≥áÊñôÂ§æÂ§±Êïó:', error);
        setFolders([]);
      }
    } catch (error) {
      console.error('ËºâÂÖ•Êï∏ÊìöÂ§±Êïó:', error);
      setError('ËºâÂÖ•Êï∏ÊìöÂ§±ÊïóÔºåË´ãÁ®çÂæåÈáçË©¶');
      setResults([]);
      setFolders([]);
    } finally {
      setLoading(false);
    }
  }, []);

  // ËºâÂÖ•Ë≥áÊñôÂ§æÊï∏Êìö
  const loadFolders = useCallback(async (forceRefresh = false) => {
    try {
      console.log('üîÑ loadFolders ÂºÄÂßãÂä†ËΩΩ...', { forceRefresh, timestamp: Date.now() });

      // Ê∑ªÂä†Êó∂Èó¥Êà≥ÂèÇÊï∞Âº∫Âà∂Âà∑Êñ∞ÔºåÈÅøÂÖçÁºìÂ≠òÈóÆÈ¢ò
      const timestamp = Date.now();
      const url = forceRefresh ? `/api/folders?t=${timestamp}` : '/api/folders';

      const foldersResponse = await fetch(url, {
        cache: 'no-cache',
        headers: {
          'Cache-Control': 'no-cache',
          'Pragma': 'no-cache'
        }
      });

      if (foldersResponse.ok) {
        const foldersData = await foldersResponse.json();
        console.log('üìÅ ËµÑÊñôÂ§πÊï∞ÊçÆ:', foldersData);
        const formattedFolders: ResultFolder[] = foldersData.map((folder: any) => ({
          id: folder.id,
          name: folder.name,
          resultCount: folder.resultCount || 0,
          createdAt: folder.createdAt,
          color: folder.color
        }));
        setFolders(formattedFolders);
        console.log('‚úÖ ËµÑÊñôÂ§πÁä∂ÊÄÅÂ∑≤Êõ¥Êñ∞:', formattedFolders);
      } else {
        console.log('ÁÑ°Ê≥ïËºâÂÖ•Ë≥áÊñôÂ§æÔºå‰ΩøÁî®Á©∫ÂàóË°®');
        setFolders([]);
      }
    } catch (error) {
      console.error('ËºâÂÖ•Ë≥áÊñôÂ§æÂ§±Êïó:', error);
      setFolders([]);
    }
  }, []); // ÁßªÈô§ currentFolderId ‰æùËµñÔºåÂõ†‰∏∫Ëøô‰∏™ÂáΩÊï∞‰∏çÂ∫îËØ•‰æùËµñÂΩìÂâçËµÑÊñôÂ§π

  // ÂàùÂßãËºâÂÖ•ÂíåËµÑÊñôÂ§πÂèòÂåñÊó∂ÈáçÊñ∞Âä†ËΩΩ
  useEffect(() => {
    // Áõ¥Êé•Âú® useEffect ‰∏≠Ë∞ÉÁî® APIÔºåÁ°Æ‰øù‰ΩøÁî®ÊúÄÊñ∞ÁöÑ currentFolderId
    const loadResultsForFolder = async () => {
      setLoading(true);
      setError(null);

      try {
        const folderId = currentFolderId || 'null';
        const response = await fetch(`/api/results?folderId=${folderId}`);
        if (response.ok) {
          const data = await response.json();
          setResults(data);
        } else {
          console.error('ËºâÂÖ•ÁµêÊûúÂ§±Êïó:', response.status);
          setResults([]);
        }
      } catch (error) {
        console.error('ËºâÂÖ•ÁµêÊûúÈåØË™§:', error);
        setResults([]);
        setError('ËºâÂÖ•ÁµêÊûúÊôÇÁôºÁîüÈåØË™§');
      } finally {
        setLoading(false);
      }
    };

    loadResultsForFolder();
    loadFolders();
  }, [currentFolderId]);

  // Ê†ºÂºèÂåñÊôÇÈñìÈ°ØÁ§∫
  const formatDateTime = (dateString: string) => {
    const date = new Date(dateString);
    const now = new Date();
    const diffInHours = Math.floor((now.getTime() - date.getTime()) / (1000 * 60 * 60));
    
    if (diffInHours < 24) {
      return `${date.getDate()} ${date.toLocaleDateString('zh-TW', { month: 'short' })} ${date.getHours()}:${date.getMinutes().toString().padStart(2, '0')}`;
    }
    
    return date.toLocaleDateString('zh-TW', { 
      month: 'short', 
      day: 'numeric',
      hour: '2-digit',
      minute: '2-digit'
    });
  };

  // ÈÅéÊøæÂíåÊéíÂ∫èÁµêÊûú
  const filteredAndSortedResults = results
    .filter(result => 
      result.title.toLowerCase().includes(searchQuery.toLowerCase()) ||
      result.activityName.toLowerCase().includes(searchQuery.toLowerCase())
    )
    .sort((a, b) => {
      switch (sortBy) {
        case 'created':
          return new Date(b.createdAt).getTime() - new Date(a.createdAt).getTime();
        case 'deadline':
          if (!a.deadline && !b.deadline) return 0;
          if (!a.deadline) return 1;
          if (!b.deadline) return -1;
          return new Date(a.deadline).getTime() - new Date(b.deadline).getTime();
        case 'name':
          return a.title.localeCompare(b.title);
        default:
          return 0;
      }
    });

  // ÈÅéÊøæË≥áÊñôÂ§æ
  const filteredFolders = folders.filter(folder =>
    folder.name.toLowerCase().includes(searchQuery.toLowerCase())
  );

  // ËôïÁêÜÁµêÊûúÈ†ÖÁõÆÈªûÊìä
  const handleResultClick = (result: AssignmentResult) => {
    // Â∞éËà™Âà∞ÁµêÊûúË©≥ÊÉÖÈ†ÅÈù¢
    window.location.href = `/my-results/${result.id}`;
  };

  // ËôïÁêÜË≥áÊñôÂ§æÈªûÊìä
  const handleFolderClick = (folder: ResultFolder) => {
    // Â∞éËà™Âà∞Ë≥áÊñôÂ§æÈ†ÅÈù¢
    setCurrentFolderId(folder.id);
  };

  // ËôïÁêÜÂâµÂª∫Êñ∞Ë≥áÊñôÂ§æ
  const handleCreateFolder = async (name: string, color: string) => {
    try {
      const response = await fetch('/api/folders', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({
          name,
          color,
          description: null,
          icon: 'folder'
        }),
      });

      if (!response.ok) {
        const errorData = await response.json();
        throw new Error(errorData.error || 'ÂâµÂª∫Ë≥áÊñôÂ§æÂ§±Êïó');
      }

      const createdFolder = await response.json();
      const newFolder: ResultFolder = {
        id: createdFolder.id,
        name: createdFolder.name,
        resultCount: createdFolder.activityCount || 0,
        createdAt: createdFolder.createdAt,
        color: createdFolder.color
      };

      setFolders(prev => [...prev, newFolder]);
      console.log('ÂâµÂª∫Ë≥áÊñôÂ§æÊàêÂäü:', newFolder);
    } catch (error) {
      console.error('ÂâµÂª∫Ë≥áÊñôÂ§æÂ§±Êïó:', error);
      throw error;
    }
  };

  // ËôïÁêÜÂõûÊî∂Ê°∂ÈªûÊìä
  const handleRecycleBinClick = () => {
    setShowRecycleBin(true);
  };

  // ËôïÁêÜÈáçÂëΩÂêçË≥áÊñôÂ§æ
  const handleRenameFolder = async (folderId: string, newName: string) => {
    try {
      const response = await fetch(`/api/folders/${folderId}`, {
        method: 'PATCH',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({ name: newName }),
      });

      if (!response.ok) {
        throw new Error('ÈáçÂëΩÂêçÂ§±Êïó');
      }

      // ÈáçÊñ∞ËºâÂÖ•Ë≥áÊñôÂ§æ
      await loadFolders();
    } catch (error) {
      console.error('ÈáçÂëΩÂêçË≥áÊñôÂ§æÂ§±Êïó:', error);
      throw error;
    }
  };

  // ËôïÁêÜË≥áÊñôÂ§æÈáçÂëΩÂêçÈªûÊìä
  const handleFolderRename = (folder: ResultFolder) => {
    setRenamingFolder(folder);
    setShowRenameFolderModal(true);
  };

  // ËôïÁêÜÁßªÂãïÁµêÊûúÂà∞Ë≥áÊñôÂ§æ
  const handleMoveResult = async (resultId: string, folderId: string | null) => {
    console.log('üöÄ handleMoveResult ÂºÄÂßã:', {
      resultId,
      folderId,
      currentFolderId,
      timestamp: Date.now()
    });

    // ÂÆûÁé∞‰πêËßÇÊõ¥Êñ∞ÔºöÁ´ãÂç≥Êõ¥Êñ∞UIÁä∂ÊÄÅ
    const originalResults = [...results];
    const originalFolders = [...folders];

    try {
      // ‰πêËßÇÊõ¥Êñ∞ÔºöÁ´ãÂç≥‰ªéÂΩìÂâçËßÜÂõæ‰∏≠ÁßªÈô§ÁªìÊûú
      if (currentFolderId) {
        console.log('üîÑ ‰πêËßÇÊõ¥Êñ∞Ôºö‰ªéÂΩìÂâçËµÑÊñôÂ§πËßÜÂõæÁßªÈô§ÁªìÊûú');
        setResults(prevResults => prevResults.filter(result => result.id !== resultId));
      }

      // ‰πêËßÇÊõ¥Êñ∞ÔºöÁ´ãÂç≥Êõ¥Êñ∞ËµÑÊñôÂ§πËÆ°Êï∞
      console.log('üîÑ ‰πêËßÇÊõ¥Êñ∞ÔºöÊõ¥Êñ∞ËµÑÊñôÂ§πËÆ°Êï∞', {
        currentFolderId,
        targetFolderId: folderId,
        operation: currentFolderId ? '‰ªéËµÑÊñôÂ§πÂáèÂ∞ë' : 'Êó†',
        targetOperation: folderId ? 'ÂêëËµÑÊñôÂ§πÂ¢ûÂä†' : 'ÂêëÊ†πÁõÆÂΩïÁßªÂä®'
      });

      setFolders(prevFolders => {
        const updatedFolders = prevFolders.map(folder => {
          if (folder.id === currentFolderId) {
            // ‰ªéÂΩìÂâçËµÑÊñôÂ§πÂáèÂ∞ëËÆ°Êï∞
            const newCount = Math.max(0, folder.resultCount - 1);
            console.log(`üìä ËµÑÊñôÂ§π ${folder.name} ËÆ°Êï∞: ${folder.resultCount} -> ${newCount}`);
            return { ...folder, resultCount: newCount };
          } else if (folder.id === folderId) {
            // ÂêëÁõÆÊ†áËµÑÊñôÂ§πÂ¢ûÂä†ËÆ°Êï∞
            const newCount = folder.resultCount + 1;
            console.log(`üìä ËµÑÊñôÂ§π ${folder.name} ËÆ°Êï∞: ${folder.resultCount} -> ${newCount}`);
            return { ...folder, resultCount: newCount };
          }
          return folder;
        });

        console.log('‚úÖ ‰πêËßÇÊõ¥Êñ∞ËµÑÊñôÂ§πËÆ°Êï∞ÂÆåÊàê');
        return updatedFolders;
      });

      console.log('‚úÖ ‰πêËßÇÊõ¥Êñ∞ÂÆåÊàêÔºåÂºÄÂßãAPIË∞ÉÁî®...');

      const response = await fetch(`/api/results/${resultId}/move`, {
        method: 'PATCH',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({ folderId }),
      });

      if (!response.ok) {
        throw new Error(`ÁßªÂãïÁµêÊûúÂ§±Êïó: ${response.status} ${response.statusText}`);
      }

      const responseData = await response.json();
      console.log('‚úÖ API Ë∞ÉÁî®ÊàêÂäü:', responseData);

      // ÁâπÊÆäÂ§ÑÁêÜÔºöÂ¶ÇÊûúÊòØÊãñÊãΩÂà∞Ê†πÁõÆÂΩïÔºåÁ´ãÂç≥ÂØºËà™ÂõûÊ†πÁõÆÂΩï
      if (folderId === null && currentFolderId) {
        console.log('üè† Ê£ÄÊµãÂà∞ÊãñÊãΩÂà∞Ê†πÁõÆÂΩïÔºåÁ´ãÂç≥ÂØºËà™ÂõûÊ†πÁõÆÂΩï...');

        // Á´ãÂç≥ÂØºËà™ÂõûÊ†πÁõÆÂΩï
        setCurrentFolderId(null);

        // Âº∫Âà∂Âà∑Êñ∞Áä∂ÊÄÅÂπ∂ÂØºËà™
        setTimeout(async () => {
          console.log('üîÑ Ê†πÁõÆÂΩïÂØºËà™ÂêéÂà∑Êñ∞Áä∂ÊÄÅ...');
          await Promise.all([loadResults(), loadFolders(true)]);
          forceRefresh();
        }, 50);

        console.log('‚úÖ ÁµêÊûúÂ∑≤ÊàêÂäüÁßªÂãïÂà∞Ê†πÁõÆÈåÑ‰∏¶Â∞éËà™ÂõûÊ†πÁõÆÈåÑ');
        return; // ÊèêÂâçËøîÂõûÔºå‰∏çÊâßË°åÂêéÁª≠ÁöÑÂêåÊ≠•ÈÄªËæë
      }

      // üî• ÂÖ≥ÈîÆ‰øÆÂ§çÔºö‰∏çÁ´ãÂç≥Ë¶ÜÁõñ‰πêËßÇÊõ¥Êñ∞ÔºåËÄåÊòØÂª∂ËøüÂêåÊ≠•
      console.log('üîÑ APIÊàêÂäüÔºåÂª∂ËøüËøõË°åÊúçÂä°Âô®Êï∞ÊçÆÂêåÊ≠•‰ª•ÈÅøÂÖçË¶ÜÁõñ‰πêËßÇÊõ¥Êñ∞...');

      // üö® ÈáçË¶ÅÔºö‰∏çÁ´ãÂç≥Ë∞ÉÁî® loadFoldersÔºåÂõ†‰∏∫‰ºöË¶ÜÁõñ‰πêËßÇÊõ¥Êñ∞
      // Âè™Á´ãÂç≥ÂêåÊ≠• resultsÔºåÂõ†‰∏∫ÂΩìÂâçËßÜÂõæÁöÑÁªìÊûúÂ∑≤ÁªèË¢´‰πêËßÇÊõ¥Êñ∞ÁßªÈô§‰∫Ü
      await loadResults();

      console.log('‚úÖ ÁªìÊûúÊï∞ÊçÆÂêåÊ≠•ÂÆåÊàêÔºåÂª∂ËøüÂêåÊ≠•ËµÑÊñôÂ§πÊï∞ÊçÆ...');

      // Âª∂ËøüÂêåÊ≠•ËµÑÊñôÂ§πÊï∞ÊçÆÔºåÁªôÊï∞ÊçÆÂ∫ì‰∫ãÂä°Ë∂≥Â§üÁöÑÊó∂Èó¥Êèê‰∫§
      setTimeout(() => {
        console.log('üîÑ ÊâßË°åÂª∂ËøüËµÑÊñôÂ§πÊï∞ÊçÆÂêåÊ≠•ÔºàÈÅøÂÖç‰∫ãÂä°Êó∂Êú∫ÈóÆÈ¢òÔºâ...');
        loadFolders(true); // Âº∫Âà∂Âà∑Êñ∞
        forceRefresh();
      }, 500); // Â¢ûÂä†Âª∂ËøüÊó∂Èó¥ÔºåÁ°Æ‰øùÊï∞ÊçÆÂ∫ì‰∫ãÂä°ÂÆåÂÖ®Êèê‰∫§

      // Á¨¨‰∫åÊ¨°‰øùÈöúÂêåÊ≠•
      setTimeout(() => {
        console.log('üîÑ ÊâßË°åÁ¨¨‰∫åÊ¨°ËµÑÊñôÂ§πÊï∞ÊçÆÂêåÊ≠•ÔºàÊúÄÁªà‰øùÈöúÔºâ...');
        loadFolders(true); // Âº∫Âà∂Âà∑Êñ∞
        forceRefresh();
      }, 1000); // Êõ¥ÈïøÁöÑÂª∂ËøüÁ°Æ‰øùÊï∞ÊçÆ‰∏ÄËá¥ÊÄß

      console.log(`‚úÖ ÁµêÊûúÂ∑≤ÊàêÂäüÁßªÂãïÂà∞${folderId ? 'Ë≥áÊñôÂ§æ' : 'Ê†πÁõÆÈåÑ'}`);

    } catch (error) {
      console.error('‚ùå ÁßªÂãïÁµêÊûúÂ§±ÊïóÔºåÂõûÊªö‰πêËßÇÊõ¥Êñ∞:', error);

      // ÂõûÊªö‰πêËßÇÊõ¥Êñ∞
      setResults(originalResults);
      setFolders(originalFolders);

      // Âç≥‰ΩøÂ§±Ë¥•‰πüË¶ÅÂº∫Âà∂Âà∑Êñ∞ÔºåÁ°Æ‰øùÁä∂ÊÄÅ‰∏ÄËá¥
      forceRefresh();

      throw error;
    }
  };



  // ËôïÁêÜË≥áÊñôÂ§æÈÅ∏ÊìáÔºàÈªûÊìäÈÄ≤ÂÖ•Ë≥áÊñôÂ§æÔºâ
  const handleFolderSelect = (folderId: string | null) => {
    setCurrentFolderId(folderId);
  };

  // ËôïÁêÜÈªûÊìäËøîÂõûÊ†πÁõÆÈåÑ
  const handleBackToRoot = () => {
    setCurrentFolderId(null);
  };



  // ËôïÁêÜÊãñÊãΩÁµêÊûúÂõûÊ†πÁõÆÈåÑ
  const handleMoveToRoot = async (resultId: string) => {
    try {
      const response = await fetch(`/api/results/${resultId}/move`, {
        method: 'PATCH',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({ folderId: null })
      });

      if (!response.ok) {
        throw new Error('ÁßªÂãïÁµêÊûúÂ§±Êïó');
      }

      // ÈáçÊñ∞ËºâÂÖ•ÁµêÊûú
      await loadResults();
      console.log('ÁµêÊûúÂ∑≤ÁßªÂãïÂà∞Ê†πÁõÆÈåÑ');
    } catch (error) {
      console.error('ÁßªÂãïÁµêÊûúÂ§±Êïó:', error);
    }
  };

  // ËôïÁêÜË≥áÊñôÂ§æËèúÂñÆÈªûÊìä
  const handleFolderMenuClick = (folder: ResultFolder, event: React.MouseEvent) => {
    event.preventDefault();
    event.stopPropagation();

    setContextMenu({
      folder,
      x: event.clientX,
      y: event.clientY
    });
  };

  // ÈóúÈñâËèúÂñÆ
  const handleCloseContextMenu = () => {
    setContextMenu(null);
  };

  // ËôïÁêÜÂà™Èô§Ë≥áÊñôÂ§æ
  const handleDeleteFolder = async (folder: ResultFolder) => {
    setFolderToDelete(folder);
    setShowDeleteModal(true);
    setContextMenu(null);
  };

  // Á¢∫Ë™çÂà™Èô§Ë≥áÊñôÂ§æ
  const handleConfirmDelete = async () => {
    if (!folderToDelete) return;

    try {
      const response = await fetch(`/api/folders?id=${folderToDelete.id}`, {
        method: 'DELETE',
      });

      if (!response.ok) {
        const errorData = await response.json();
        throw new Error(errorData.error || 'Âà™Èô§Ë≥áÊñôÂ§æÂ§±Êïó');
      }

      // ÂæûÂàóË°®‰∏≠ÁßªÈô§Â∑≤Âà™Èô§ÁöÑË≥áÊñôÂ§æ
      setFolders(prev => prev.filter(f => f.id !== folderToDelete.id));

      // ÈáçÊñ∞ËºâÂÖ•ÁµêÊûú‰ª•Êõ¥Êñ∞È°ØÁ§∫
      await loadResults();

      console.log('Ë≥áÊñôÂ§æÂà™Èô§ÊàêÂäü:', folderToDelete.name);
    } catch (error) {
      console.error('Âà™Èô§Ë≥áÊñôÂ§æÂ§±Êïó:', error);
      setError(error instanceof Error ? error.message : 'Âà™Èô§Ë≥áÊñôÂ§æÂ§±Êïó');
    } finally {
      setShowDeleteModal(false);
      setFolderToDelete(null);
    }
  };

  // ÂèñÊ∂àÂà™Èô§
  const handleCancelDelete = () => {
    setShowDeleteModal(false);
    setFolderToDelete(null);
  };

  if (loading) {
    return (
      <div className="flex items-center justify-center h-64">
        <div className="text-center">
          <div className="animate-spin rounded-full h-12 w-12 border-b-2 border-blue-600 mx-auto"></div>
          <p className="mt-4 text-gray-600">ËºâÂÖ•‰∏≠...</p>
        </div>
      </div>
    );
  }

  if (error) {
    return (
      <div className="text-center py-12">
        <div className="w-24 h-24 mx-auto mb-4 bg-red-100 rounded-full flex items-center justify-center">
          <span className="text-4xl">‚ö†Ô∏è</span>
        </div>
        <h3 className="text-lg font-medium text-gray-900 mb-2">ËºâÂÖ•Â§±Êïó</h3>
        <p className="text-gray-500 mb-6">{error}</p>
        <button 
          onClick={loadResults}
          className="inline-flex items-center px-4 py-2 border border-transparent text-sm font-medium rounded-md text-white bg-blue-600 hover:bg-blue-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-blue-500"
        >
          ÈáçÊñ∞ËºâÂÖ•
        </button>
      </div>
    );
  }



  return (
    <DragDropProvider onMoveResult={handleMoveResult}>
      <div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-8">
      {/* È†ÅÈù¢Ê®ôÈ°åÂíåÊìç‰ΩúÊåâÈàï */}
      <div className="mb-8">
        <div className="flex items-center justify-between">
          <div className="flex items-center">
            {/* Èù¢ÂåÖÂ±ëÂØºËà™ */}
            <div className="breadcrumb">
              <button
                onClick={() => handleFolderSelect(null)}
                className={`text-3xl font-bold ${currentFolderId ? 'text-blue-600 hover:text-blue-800' : 'text-gray-900'}`}
              >
                ÊàëÁöÑÁµêÊûú
              </button>
              {currentFolderId && (
                <>
                  <span className="mx-2 text-2xl text-gray-400">/</span>
                  <span className="text-3xl font-bold text-gray-900">
                    {folders.find(f => f.id === currentFolderId)?.name || 'Êú™Áü•Ë≥áÊñôÂ§æ'}
                  </span>
                </>
              )}
            </div>
          </div>
          
          <div className="flex items-center space-x-4">
            <button
              onClick={() => setShowNewFolderModal(true)}
              className="inline-flex items-center px-4 py-2 border border-gray-300 rounded-md shadow-sm text-sm font-medium text-gray-700 bg-white hover:bg-gray-50 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-blue-500"
            >
              <FolderIcon className="w-4 h-4 mr-2" />
              Êñ∞Ë≥áÊñôÂ§æ
            </button>
            
            <button
              onClick={handleRecycleBinClick}
              className="inline-flex items-center px-4 py-2 border border-gray-300 rounded-md shadow-sm text-sm font-medium text-gray-700 bg-white hover:bg-gray-50 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-blue-500"
            >
              <TrashIcon className="w-4 h-4 mr-2" />
              ÂõûÊî∂ÁÆ±
            </button>
            
            <div className="relative">
              <div className="absolute inset-y-0 left-0 pl-3 flex items-center pointer-events-none">
                <MagnifyingGlassIcon className="h-5 w-5 text-gray-400" />
              </div>
              <input
                type="text"
                placeholder="ÊêúÂ∞ãÊàëÁöÑÁµêÊûú..."
                value={searchQuery}
                onChange={(e) => setSearchQuery(e.target.value)}
                className="block w-full pl-10 pr-3 py-2 border border-gray-300 rounded-md leading-5 bg-white placeholder-gray-500 focus:outline-none focus:placeholder-gray-400 focus:ring-1 focus:ring-blue-500 focus:border-blue-500 sm:text-sm"
              />
            </div>
          </div>
        </div>
      </div>

      {/* ÊéíÂ∫èÈÅ∏È†Ö */}
      <div className="mb-6">
        <div className="flex items-center space-x-6 text-sm">
          <span className="text-gray-500">Ë®ÇË≥ºËÄÖÔºö</span>
          <button
            onClick={() => setSortBy('created')}
            className={`flex items-center space-x-1 ${
              sortBy === 'created' ? 'text-blue-600 font-medium' : 'text-gray-700 hover:text-blue-600'
            }`}
          >
            <span>ÂâµÂª∫</span>
            <span className="text-xs">‚ñº</span>
          </button>
          <button
            onClick={() => setSortBy('deadline')}
            className={`flex items-center space-x-1 ${
              sortBy === 'deadline' ? 'text-blue-600 font-medium' : 'text-gray-700 hover:text-blue-600'
            }`}
          >
            <span>ÊúÄÂæåÊúüÈôê</span>
            <span className="text-xs">‚ñº</span>
          </button>
          <button
            onClick={() => setSortBy('name')}
            className={`flex items-center space-x-1 ${
              sortBy === 'name' ? 'text-blue-600 font-medium' : 'text-gray-700 hover:text-blue-600'
            }`}
          >
            <span>ÂêçÂ≠ó</span>
            <span className="text-xs">‚ñº</span>
          </button>
        </div>
      </div>

      {/* ÊãñÊãΩÂà∞Ê†πÁõÆÂΩïÂå∫Âüü */}
      <DragToRootArea currentFolderId={currentFolderId} onBackToRoot={handleBackToRoot} />

      {/* ÂÖßÂÆπÂçÄÂüü - Á∞°ÂåñÁöÑÂàóË°®‰ΩàÂ±Ä */}
      <div className="space-y-2">
        {/* Ë≥áÊñôÂ§æ - Âè™Âú®Ê†πÁõÆÂΩïÊòæÁ§∫ */}
        {!currentFolderId && filteredFolders.map(folder => (
          <DroppableFolderCard
            key={folder.id}
            folder={folder}
            onClick={handleFolderClick}
            onMenuClick={handleFolderMenuClick}
          />
        ))}

        {/* ÁµêÊûúÈ†ÖÁõÆ */}
        {filteredAndSortedResults.map(result => (
          <DraggableResultCard
            key={result.id}
            result={result}
            onClick={handleResultClick}
            onMenuClick={(result, event) => {
              // TODO: ÂØ¶ÁèæÁµêÊûúËèúÂñÆÂäüËÉΩ
              console.log('ÁµêÊûúËèúÂñÆÈªûÊìä:', result);
            }}
          />
        ))}

        {/* Á©∫ÁãÄÊÖã */}
        {filteredAndSortedResults.length === 0 && folders.length === 0 && (
          <div className="text-center py-12">
            <div className="w-24 h-24 mx-auto mb-4 bg-gray-100 rounded-full flex items-center justify-center">
              <span className="text-4xl">üìä</span>
            </div>
            <h3 className="text-lg font-medium text-gray-900 mb-2">Â∞öÁÑ°ÁµêÊûú</h3>
            <p className="text-gray-500 mb-6">
              {searchQuery ? 'Ê≤íÊúâÊâæÂà∞Á¨¶ÂêàÊêúÂ∞ãÊ¢ù‰ª∂ÁöÑÁµêÊûú' : 'ÈñãÂßãÂâµÂª∫Ë™≤Ê•≠ÂàÜÈÖç‰æÜÊî∂ÈõÜÂ≠∏ÁîüÁµêÊûú'}
            </p>
            {!searchQuery && (
              <a
                href="/my-activities"
                className="inline-flex items-center px-4 py-2 border border-transparent text-sm font-medium rounded-md text-white bg-blue-600 hover:bg-blue-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-blue-500"
              >
                ÂâçÂæÄÊàëÁöÑÊ¥ªÂãï
              </a>
            )}
          </div>
        )}
      </div>

      {/* Êñ∞Ë≥áÊñôÂ§æÊ®°ÊÖãÂ∞çË©±Ê°Ü */}
      <NewFolderModal
        isOpen={showNewFolderModal}
        onClose={() => setShowNewFolderModal(false)}
        onCreateFolder={handleCreateFolder}
      />

      {/* Ë≥áÊñôÂ§æÂè≥ÈçµËèúÂñÆ */}
      {contextMenu && (
        <FolderContextMenu
          folder={contextMenu.folder}
          x={contextMenu.x}
          y={contextMenu.y}
          onClose={handleCloseContextMenu}
          onDelete={() => handleDeleteFolder(contextMenu.folder)}
          onRename={() => {
            handleFolderRename(contextMenu.folder);
            setContextMenu(null);
          }}
        />
      )}

      {/* Âà™Èô§Á¢∫Ë™çÂ∞çË©±Ê°Ü */}
      <DeleteConfirmModal
        isOpen={showDeleteModal}
        title="Âà™Èô§Ë≥áÊñôÂ§æ"
        message={`Á¢∫ÂÆöË¶ÅÂà™Èô§Ë≥áÊñôÂ§æ„Äå${folderToDelete?.name}„ÄçÂóéÔºüÊ≠§Êìç‰ΩúÁÑ°Ê≥ïÂæ©Âéü„ÄÇ`}
        onConfirm={handleConfirmDelete}
        onCancel={handleCancelDelete}
      />

      {/* ÈáçÂëΩÂêçË≥áÊñôÂ§æÊ®°ÊÖãÊ°Ü */}
      <RenameFolderModal
        isOpen={showRenameFolderModal}
        folder={renamingFolder}
        onClose={() => {
          setShowRenameFolderModal(false);
          setRenamingFolder(null);
        }}
        onRename={handleRenameFolder}
      />

      {/* ÂõûÊî∂Ê°∂Ê®°ÊÖãÊ°Ü */}
      <RecycleBinModal
        isOpen={showRecycleBin}
        onClose={() => setShowRecycleBin(false)}
        onItemRestored={() => {
          // ÂΩìÈ°πÁõÆË¢´ÊÅ¢Â§çÊó∂ÔºåÈáçÊñ∞Âä†ËΩΩÊï∞ÊçÆ
          loadResults();
          loadFolders();
        }}
      />
      </div>
    </DragDropProvider>
  );
};

export default WordwallStyleMyResults;
