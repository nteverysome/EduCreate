generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                   String                @id @default(cuid())
  name                 String?
  email                String                @unique
  password             String?
  emailVerified        DateTime?
  image                String?
  country              String?               @default("TW")
  language             String?               @default("zh-TW") // 用戶界面語言
  createdAt            DateTime              @default(now())
  updatedAt            DateTime              @updatedAt
  role                 Role                  @default(USER)

  // 社區個人資料
  bio                  String?               // 個人簡介
  socialLinks          Json?                 // 社交媒體連結 {twitter, facebook, linkedin, website}

  accounts             Account[]
  activities           Activity[]
  activityVersions     ActivityVersion[]
  activityVersionLogs  ActivityVersionLog[]
  folders              Folder[]
  h5pContents          H5PContent[]
  invoices             Invoice[]
  notificationSettings NotificationSettings?
  passwordReset        PasswordReset?
  sessions             Session[]
  subscription         Subscription?
  learningProgress     LearningProgress[]
  vocabularySets       VocabularySet[]

  // 社區功能關聯
  activityLikes        ActivityLike[]
  activityBookmarks    ActivityBookmark[]
  activityComments     ActivityComment[]
  communityReports     CommunityReport[]

  // 粉絲/關注關係
  following            UserFollow[]          @relation("UserFollowing")
  followers            UserFollow[]          @relation("UserFollowers")

  // 自訂標籤
  customTags           String[]              @default([])
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model PasswordReset {
  id      String   @id @default(cuid())
  token   String   @unique
  expires DateTime
  userId  String   @unique
  user    User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Activity {
  id              String               @id @default(cuid())
  title           String
  description     String?
  content         Json?
  elements        Json                 @default("[]")
  type            String
  templateType    String?
  published       Boolean              @default(false)
  isPublic        Boolean              @default(false)
  isDraft         Boolean              @default(false)
  folderId        String?
  lastPlayed      DateTime?
  playCount       Int                  @default(0)
  shareCount      Int                  @default(0)
  gameTemplateId  String?
  aiGenerated     Boolean              @default(false)
  difficulty      DifficultyLevel?
  estimatedTime   String?
  tags            String[]
  geptLevel       GEPTLevel?           @default(ELEMENTARY)
  totalWords      Int                  @default(0)

  // 社區分享功能（基礎）
  isPublicShared  Boolean              @default(false)
  shareToken      String?              @unique
  communityPlays  Int                  @default(0)

  // 社區功能（擴展）
  publishedToCommunityAt DateTime?
  communityCategory      String?
  communityTags          String[]             @default([])
  communityDescription   String?
  communityThumbnail     String?
  communityViews         Int                  @default(0)
  communityLikes         Int                  @default(0)
  communityBookmarks     Int                  @default(0)
  communityComments      Int                  @default(0)
  isFeatured             Boolean              @default(false)
  featuredAt             DateTime?
  thumbnailUrl           String?              // 活動縮圖 URL（Vercel Blob Storage）
  screenshotStatus       String?              @default("pending") // pending, generating, completed, failed
  screenshotError        String?              // 截圖生成錯誤信息
  screenshotRetryCount   Int                  @default(0) // 重試次數

  createdAt       DateTime             @default(now())
  updatedAt       DateTime             @updatedAt
  deletedAt       DateTime?
  templateId      String?
  userId          String
  h5pContentId    String?
  folder          Folder?              @relation(fields: [folderId], references: [id])
  gameTemplate    GameTemplate?        @relation(fields: [gameTemplateId], references: [id])
  h5pContent      H5PContent?          @relation(fields: [h5pContentId], references: [id])
  template        Template?            @relation(fields: [templateId], references: [id])
  user            User                 @relation(fields: [userId], references: [id], onDelete: Cascade)
  versions        ActivityVersion[]
  versionLogs     ActivityVersionLog[]
  assignments     Assignment[]
  gameSettings    GameSettings?
  vocabularyItems VocabularyItem[]

  // 社區功能關聯
  likes           ActivityLike[]
  bookmarks       ActivityBookmark[]
  comments        ActivityComment[]
  reports         CommunityReport[]

  // 索引優化
  @@index([isPublicShared, publishedToCommunityAt])
  @@index([communityCategory])
  @@index([communityLikes])
  @@index([communityViews])
  @@index([isFeatured, featuredAt])
  @@index([userId, isPublicShared])
}

model Template {
  id          String       @id @default(cuid())
  name        String
  description String?
  type        TemplateType
  thumbnail   String?
  config      Json
  activities  Activity[]
}

model Folder {
  id          String             @id @default(cuid())
  name        String
  description String?
  color       String?
  icon        String?
  type        FolderType         @default(ACTIVITIES) // 資料夾類型：ACTIVITIES 或 RESULTS
  createdAt   DateTime           @default(now())
  updatedAt   DateTime           @updatedAt
  deletedAt   DateTime?
  userId      String
  activities  Activity[]
  results     AssignmentResult[] // 資料夾中的結果
  user        User               @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([name, userId, type]) // 同一用戶在同一類型下不能有重名資料夾
}

model Subscription {
  id                   String    @id @default(cuid())
  userId               String    @unique
  planId               String
  status               SubStatus @default(ACTIVE)
  startDate            DateTime  @default(now())
  endDate              DateTime?
  stripeCustomerId     String?   @unique
  stripeSubscriptionId String?   @unique
  currentPeriodStart   DateTime?
  currentPeriodEnd     DateTime?
  cancelAtPeriodEnd    Boolean   @default(false)
  invoices             Invoice[]
  plan                 Plan      @relation(fields: [planId], references: [id])
  user                 User      @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Plan {
  id            String          @id @default(cuid())
  name          String
  description   String?
  price         Float
  interval      BillingInterval
  features      String[]
  subscriptions Subscription[]
}

model H5PContent {
  id          String           @id @default(cuid())
  title       String
  description String?
  content     Json             @default("{}")
  library     String           @default("H5P.InteractiveVideo")
  contentType String
  contentPath String
  status      H5PContentStatus @default(DRAFT)
  published   Boolean          @default(false)
  createdAt   DateTime         @default(now())
  updatedAt   DateTime         @updatedAt
  userId      String
  activities  Activity[]
  user        User             @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model ActivityVersion {
  id           String               @id @default(cuid())
  versionName  String
  versionNotes String?
  content      Json?
  elements     Json
  published    Boolean              @default(false)
  createdAt    DateTime             @default(now())
  activityId   String
  userId       String
  activity     Activity             @relation(fields: [activityId], references: [id], onDelete: Cascade)
  user         User                 @relation(fields: [userId], references: [id], onDelete: Cascade)
  logs         ActivityVersionLog[]
}

model ActivityVersionLog {
  id         String           @id @default(cuid())
  action     String
  details    String?
  createdAt  DateTime         @default(now())
  activityId String
  versionId  String?
  userId     String
  activity   Activity         @relation(fields: [activityId], references: [id], onDelete: Cascade)
  user       User             @relation(fields: [userId], references: [id], onDelete: Cascade)
  version    ActivityVersion? @relation(fields: [versionId], references: [id])
}

model Invoice {
  id               String            @id @default(cuid())
  stripeInvoiceId  String            @unique
  amount           Float
  currency         String            @default("usd")
  status           String
  invoiceUrl       String?
  invoicePdf       String?
  createdAt        DateTime          @default(now())
  paidAt           DateTime?
  subscriptionId   String
  userId           String
  subscription     Subscription      @relation(fields: [subscriptionId], references: [id], onDelete: Cascade)
  user             User              @relation(fields: [userId], references: [id], onDelete: Cascade)
  notificationLogs NotificationLog[]
}

model NotificationSettings {
  id                       String   @id @default(cuid())
  paymentSuccess           Boolean  @default(true)
  paymentFailed            Boolean  @default(true)
  subscriptionRenewal      Boolean  @default(true)
  subscriptionCancellation Boolean  @default(true)
  promotions               Boolean  @default(false)
  createdAt                DateTime @default(now())
  updatedAt                DateTime @updatedAt
  userId                   String   @unique
  user                     User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model NotificationLog {
  id               String   @id @default(cuid())
  type             String
  recipient        String
  content          String?
  sentAt           DateTime @default(now())
  sentBy           String
  relatedInvoiceId String?
  relatedInvoice   Invoice? @relation(fields: [relatedInvoiceId], references: [id])
}

model GameTemplate {
  id                String          @id @default(cuid())
  name              String          @unique
  displayName       String
  description       String?
  icon              String?
  category          GameCategory    @default(QUIZ)
  difficulty        DifficultyLevel @default(EASY)
  estimatedTime     String?
  features          String[]
  minItems          Int             @default(1)
  maxItems          Int             @default(50)
  requiresEvenItems Boolean         @default(false)
  isActive          Boolean         @default(true)
  isPremium         Boolean         @default(false)
  sortOrder         Int             @default(0)
  createdAt         DateTime        @default(now())
  updatedAt         DateTime        @updatedAt
  activities        Activity[]
  gameSettings      GameSettings[]
}

model VisualTheme {
  id              String         @id @default(cuid())
  name            String         @unique
  displayName     String
  description     String?
  thumbnail       String?
  category        ThemeCategory  @default(CLASSIC)
  isPremium       Boolean        @default(false)
  isActive        Boolean        @default(true)
  sortOrder       Int            @default(0)
  primaryColor    String         @default("#007bff")
  secondaryColor  String         @default("#6c757d")
  backgroundColor String         @default("#ffffff")
  textColor       String         @default("#212529")
  accentColor     String?
  borderColor     String?
  fontFamily      String?
  borderRadius    String?
  boxShadow       String?
  backgroundImage String?
  customCSS       String?
  createdAt       DateTime       @default(now())
  updatedAt       DateTime       @updatedAt
  gameSettings    GameSettings[]
}

model GameSettings {
  id               String        @id @default(cuid())
  activityId       String        @unique
  templateId       String?
  themeId          String?
  timerType        TimerType     @default(NONE)
  timerDuration    Int?
  livesCount       Int           @default(0)
  shuffleQuestions Boolean       @default(false)
  shuffleAnswers   Boolean       @default(false)
  autoProceed      Boolean       @default(true)
  showAnswers      Boolean       @default(true)
  answerLabels     AnswerLabels  @default(ABC)
  enableSounds     Boolean       @default(true)
  enableAnimations Boolean       @default(true)
  allowRetry       Boolean       @default(true)
  showProgress     Boolean       @default(true)
  showScore        Boolean       @default(true)
  createdAt        DateTime      @default(now())
  updatedAt        DateTime      @updatedAt
  activity         Activity      @relation(fields: [activityId], references: [id], onDelete: Cascade)
  template         GameTemplate? @relation(fields: [templateId], references: [id])
  theme            VisualTheme?  @relation(fields: [themeId], references: [id])
}

model AIPrompt {
  id             String       @id @default(cuid())
  name           String       @unique
  templateType   TemplateType
  promptTemplate String
  exampleInput   String?
  exampleOutput  String?
  isActive       Boolean      @default(true)
  version        String       @default("1.0")
  model          String       @default("gpt-4")
  temperature    Float        @default(0.7)
  maxTokens      Int          @default(2000)
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt
}

model VocabularySet {
  id               String             @id @default(cuid())
  userId           String
  title            String
  description      String?
  geptLevel        GEPTLevel          @default(ELEMENTARY)
  isPublic         Boolean            @default(false)
  totalWords       Int                @default(0)
  createdAt        DateTime           @default(now())
  updatedAt        DateTime           @updatedAt
  learningProgress LearningProgress[]
  items            VocabularyItem[]
  user             User               @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("vocabulary_sets")
}

model VocabularyItem {
  id               String             @id @default(cuid())
  setId            String?
  activityId       String?
  english          String
  chinese          String
  phonetic         String?
  partOfSpeech     PartOfSpeech?
  difficultyLevel  Int                @default(1)
  exampleSentence  String?
  notes            String?
  imageUrl         String?
  audioUrl         String?
  createdAt        DateTime           @default(now())
  updatedAt        DateTime           @updatedAt
  learningProgress LearningProgress[]
  activity         Activity?          @relation(fields: [activityId], references: [id], onDelete: Cascade)
  set              VocabularySet?     @relation(fields: [setId], references: [id], onDelete: Cascade)

  @@map("vocabulary_items")
}

model LearningProgress {
  id               String          @id @default(cuid())
  userId           String
  vocabularySetId  String
  vocabularyItemId String?
  gameType         String
  correctCount     Int             @default(0)
  incorrectCount   Int             @default(0)
  totalAttempts    Int             @default(0)
  bestScore        Int             @default(0)
  averageScore     Float           @default(0)
  masteryLevel     Int             @default(0)
  lastReviewed     DateTime?
  nextReview       DateTime?
  reviewInterval   Int             @default(1)
  totalStudyTime   Int             @default(0)
  sessionCount     Int             @default(0)
  createdAt        DateTime        @default(now())
  updatedAt        DateTime        @updatedAt
  user             User            @relation(fields: [userId], references: [id], onDelete: Cascade)
  vocabularyItem   VocabularyItem? @relation(fields: [vocabularyItemId], references: [id], onDelete: Cascade)
  vocabularySet    VocabularySet   @relation(fields: [vocabularySetId], references: [id], onDelete: Cascade)

  @@unique([userId, vocabularySetId, vocabularyItemId, gameType])
  @@map("learning_progress")
}

enum Role {
  USER
  PREMIUM_USER
  TEACHER
  ADMIN
}

enum TemplateType {
  MATCHING
  FLASHCARDS
  QUIZ
  UNIVERSAL
  SPIN_WHEEL
  WHACK_A_MOLE
  MEMORY_CARDS
  WORD_SEARCH
  CROSSWORD
  FILL_BLANKS
  TRUE_FALSE
  DRAG_SORT
  BALLOON_POP
  AIRPLANE
  MAZE_CHASE
  HANGMAN
  IMAGE_QUIZ
  GAMESHOW_QUIZ
  OPEN_THE_BOX
  MATCHING_PAIRS
  FIND_THE_MATCH
  ANAGRAM
  SPEAKING_CARDS
  UNJUMBLE
  COMPLETE_SENTENCE
  SPELL_WORD
  FLIP_TILES
  TYPE_ANSWER
  SPEED_SORTING
  WATCH_MEMORIZE
  PAIR_NO_PAIR
  RANK_ORDER
  WIN_LOSE_QUIZ
  MATH_GENERATOR
  WORD_MAGNETS
  FLYING_FRUIT
  GROUP_SORT
  LABELLED_DIAGRAM
}

enum SubStatus {
  ACTIVE
  CANCELED
  PAYMENT_FAILED
  PAST_DUE
  UNPAID
  EXPIRED
}

enum BillingInterval {
  MONTHLY
  YEARLY
}

enum H5PContentStatus {
  DRAFT
  PUBLISHED
}

enum GameCategory {
  QUIZ
  MATCHING
  MEMORY
  ACTION
  CREATIVE
  WORD_GAMES
  MATH_GAMES
}

enum DifficultyLevel {
  EASY
  MEDIUM
  HARD
}

enum ThemeCategory {
  CLASSIC
  THEMED
  SEASONAL
  EDUCATIONAL
  MODERN
}

enum TimerType {
  NONE
  COUNT_UP
  COUNT_DOWN
}

enum AnswerLabels {
  ABC
  NUMBERS
  NONE
}

enum GEPTLevel {
  KIDS
  ELEMENTARY
  INTERMEDIATE
  HIGH_INTERMEDIATE
}

enum FolderType {
  ACTIVITIES  // 活動資料夾
  RESULTS     // 結果資料夾
}

enum PartOfSpeech {
  NOUN
  VERB
  ADJECTIVE
  ADVERB
  PRONOUN
  PREPOSITION
  CONJUNCTION
  INTERJECTION
  ARTICLE
  PHRASE
}

// 課業分配模型
model Assignment {
  id                String             @id @default(cuid())
  activityId        String
  title             String
  registrationType  RegistrationType   @default(NAME)
  deadline          DateTime?
  gameEndSettings   Json?              // 遊戲結束設置
  status            AssignmentStatus   @default(ACTIVE)
  createdAt         DateTime           @default(now())
  updatedAt         DateTime           @updatedAt

  // 關聯
  activity          Activity           @relation(fields: [activityId], references: [id], onDelete: Cascade)
  results           AssignmentResult[]
}

// 課業結果模型
model AssignmentResult {
  id           String               @id @default(cuid())
  assignmentId String
  resultNumber Int                  // 結果編號（如：結果1、結果2）
  customTitle  String?              // 自定義標題，用於重命名功能
  shareToken   String?              @unique // 可共用結果連結的 token
  status       ResultStatus         @default(ACTIVE)
  folderId     String?              // 資料夾ID，用於組織結果
  createdAt    DateTime             @default(now())
  updatedAt    DateTime             @updatedAt

  // 關聯
  assignment   Assignment           @relation(fields: [assignmentId], references: [id], onDelete: Cascade)
  folder       Folder?              @relation(fields: [folderId], references: [id], onDelete: SetNull)
  participants GameParticipant[]
}

// 遊戲參與者模型
model GameParticipant {
  id             String           @id @default(cuid())
  resultId       String
  studentName    String
  score          Int              @default(0)
  timeSpent      Int              @default(0)  // 遊戲時間（秒）
  correctAnswers Int              @default(0)
  totalQuestions Int              @default(0)
  gameData       Json?            // 詳細遊戲數據
  completedAt    DateTime         @default(now())

  // 關聯
  result         AssignmentResult @relation(fields: [resultId], references: [id], onDelete: Cascade)
}

// 註冊類型枚舉
enum RegistrationType {
  NAME
  ANONYMOUS
  GOOGLE
}

enum AssignmentStatus {
  ACTIVE
  COMPLETED
  EXPIRED
}

enum ResultStatus {
  ACTIVE
  ARCHIVED
}

// ==================== 社區功能模型 ====================

// 活動喜歡模型
model ActivityLike {
  id         String   @id @default(cuid())
  activityId String
  userId     String
  createdAt  DateTime @default(now())

  // 關聯
  activity   Activity @relation(fields: [activityId], references: [id], onDelete: Cascade)
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  // 唯一約束：每個用戶只能喜歡一次
  @@unique([activityId, userId])
  @@index([userId])
  @@index([activityId])
  @@index([createdAt])
}

// 活動收藏模型
model ActivityBookmark {
  id         String   @id @default(cuid())
  activityId String
  userId     String
  folderId   String?  // 可選：收藏到特定資料夾
  createdAt  DateTime @default(now())

  // 關聯
  activity   Activity @relation(fields: [activityId], references: [id], onDelete: Cascade)
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  // 唯一約束：每個用戶只能收藏一次
  @@unique([activityId, userId])
  @@index([userId])
  @@index([activityId])
  @@index([folderId])
  @@index([createdAt])
}

// 活動評論模型
model ActivityComment {
  id         String    @id @default(cuid())
  activityId String
  userId     String
  content    String
  parentId   String?   // 父評論ID（用於回覆）
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt
  deletedAt  DateTime? // 軟刪除

  // 關聯
  activity   Activity          @relation(fields: [activityId], references: [id], onDelete: Cascade)
  user       User              @relation(fields: [userId], references: [id], onDelete: Cascade)
  parent     ActivityComment?  @relation("CommentReplies", fields: [parentId], references: [id], onDelete: Cascade)
  replies    ActivityComment[] @relation("CommentReplies")

  // 索引
  @@index([activityId])
  @@index([userId])
  @@index([parentId])
  @@index([createdAt])
  @@index([deletedAt])
}

// 社區舉報模型
model CommunityReport {
  id         String       @id @default(cuid())
  activityId String
  userId     String
  reason     ReportReason
  details    String?
  status     ReportStatus @default(PENDING)
  createdAt  DateTime     @default(now())
  updatedAt  DateTime     @updatedAt
  resolvedAt DateTime?
  resolvedBy String?      // 處理人員ID

  // 關聯
  activity   Activity     @relation(fields: [activityId], references: [id], onDelete: Cascade)
  user       User         @relation(fields: [userId], references: [id], onDelete: Cascade)

  // 索引
  @@index([activityId])
  @@index([userId])
  @@index([status])
  @@index([createdAt])
}

// 舉報原因枚舉
enum ReportReason {
  INAPPROPRIATE_CONTENT
  SPAM
  COPYRIGHT_VIOLATION
  MISLEADING
  OTHER
}

// 用戶關注模型
model UserFollow {
  id          String   @id @default(cuid())
  followerId  String   // 關注者ID
  followingId String   // 被關注者ID
  createdAt   DateTime @default(now())

  // 關聯
  follower    User     @relation("UserFollowing", fields: [followerId], references: [id], onDelete: Cascade)
  following   User     @relation("UserFollowers", fields: [followingId], references: [id], onDelete: Cascade)

  // 索引和唯一約束
  @@unique([followerId, followingId])
  @@index([followerId])
  @@index([followingId])
  @@index([createdAt])
}

// 舉報狀態枚舉
enum ReportStatus {
  PENDING
  REVIEWING
  RESOLVED
  REJECTED
}
