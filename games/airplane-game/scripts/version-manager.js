#!/usr/bin/env node

/**
 * ÁâàÊú¨ÁÆ°ÁêÜËÖ≥Êú¨
 * ÂäüËÉΩÔºö
 * 1. Ëá™ÂãïÁâàÊú¨ËôüÁÆ°ÁêÜ
 * 2. ÁîüÊàêËÆäÊõ¥Êó•Ë™å
 * 3. Git Ê®ôÁ±§ÁÆ°ÁêÜ
 * 4. ÁâàÊú¨ÂõûÊªæÂäüËÉΩ
 */

import { execSync } from 'child_process';
import fs from 'fs';
import path from 'path';
import { fileURLToPath } from 'url';

const __filename = fileURLToPath(import.meta.url);
const __dirname = path.dirname(__filename);

const CONFIG = {
  packageJsonPath: path.resolve(__dirname, '../package.json'),
  changelogPath: path.resolve(__dirname, '../CHANGELOG.md'),
  versionsDir: path.resolve(__dirname, '../versions'),
};

/**
 * Êó•Ë™åÂ∑•ÂÖ∑
 */
class Logger {
  static info(message, ...args) {
    console.log(`‚ÑπÔ∏è  ${message}`, ...args);
  }
  
  static success(message, ...args) {
    console.log(`‚úÖ ${message}`, ...args);
  }
  
  static warn(message, ...args) {
    console.warn(`‚ö†Ô∏è  ${message}`, ...args);
  }
  
  static error(message, ...args) {
    console.error(`‚ùå ${message}`, ...args);
  }
}

/**
 * Âü∑Ë°å Git ÂëΩ‰ª§
 */
function execGit(command) {
  try {
    return execSync(`git ${command}`, { encoding: 'utf8' }).trim();
  } catch (error) {
    Logger.error(`Git ÂëΩ‰ª§Â§±Êïó: git ${command}`);
    throw error;
  }
}

/**
 * ËÆÄÂèñ package.json
 */
function readPackageJson() {
  if (!fs.existsSync(CONFIG.packageJsonPath)) {
    throw new Error('package.json Êñá‰ª∂‰∏çÂ≠òÂú®');
  }
  
  const content = fs.readFileSync(CONFIG.packageJsonPath, 'utf8');
  return JSON.parse(content);
}

/**
 * ÂØ´ÂÖ• package.json
 */
function writePackageJson(packageData) {
  const content = JSON.stringify(packageData, null, 2) + '\n';
  fs.writeFileSync(CONFIG.packageJsonPath, content);
}

/**
 * Ëß£ÊûêÁâàÊú¨Ëôü
 */
function parseVersion(version) {
  const match = version.match(/^(\d+)\.(\d+)\.(\d+)(?:-(.+))?$/);
  if (!match) {
    throw new Error(`ÁÑ°ÊïàÁöÑÁâàÊú¨ËôüÊ†ºÂºè: ${version}`);
  }
  
  return {
    major: parseInt(match[1]),
    minor: parseInt(match[2]),
    patch: parseInt(match[3]),
    prerelease: match[4] || null,
    original: version,
  };
}

/**
 * Ê†ºÂºèÂåñÁâàÊú¨Ëôü
 */
function formatVersion(versionObj) {
  let version = `${versionObj.major}.${versionObj.minor}.${versionObj.patch}`;
  if (versionObj.prerelease) {
    version += `-${versionObj.prerelease}`;
  }
  return version;
}

/**
 * Â¢ûÂä†ÁâàÊú¨Ëôü
 */
function bumpVersion(currentVersion, type) {
  const version = parseVersion(currentVersion);
  
  switch (type) {
    case 'major':
      version.major++;
      version.minor = 0;
      version.patch = 0;
      version.prerelease = null;
      break;
    case 'minor':
      version.minor++;
      version.patch = 0;
      version.prerelease = null;
      break;
    case 'patch':
      version.patch++;
      version.prerelease = null;
      break;
    case 'prerelease':
      if (version.prerelease) {
        const match = version.prerelease.match(/^(.+)\.(\d+)$/);
        if (match) {
          version.prerelease = `${match[1]}.${parseInt(match[2]) + 1}`;
        } else {
          version.prerelease = `${version.prerelease}.1`;
        }
      } else {
        version.patch++;
        version.prerelease = 'alpha.0';
      }
      break;
    default:
      throw new Error(`Êú™Áü•ÁöÑÁâàÊú¨È°ûÂûã: ${type}`);
  }
  
  return formatVersion(version);
}

/**
 * Áç≤Âèñ Git ËÆäÊõ¥
 */
function getGitChanges(fromTag = null) {
  let command = 'log --oneline --no-merges';
  
  if (fromTag) {
    // Ê™¢Êü•Ê®ôÁ±§ÊòØÂê¶Â≠òÂú®
    try {
      execGit(`rev-parse ${fromTag}`);
      command += ` ${fromTag}..HEAD`;
    } catch (error) {
      Logger.warn(`Ê®ôÁ±§ ${fromTag} ‰∏çÂ≠òÂú®ÔºåÁç≤ÂèñÊâÄÊúâÊèê‰∫§`);
    }
  }
  
  const output = execGit(command);
  if (!output) return [];
  
  return output.split('\n').map(line => {
    const match = line.match(/^([a-f0-9]+)\s+(.+)$/);
    return match ? { hash: match[1], message: match[2] } : null;
  }).filter(Boolean);
}

/**
 * ÁîüÊàêËÆäÊõ¥Êó•Ë™å
 */
function generateChangelog(version, changes) {
  const date = new Date().toISOString().split('T')[0];
  
  let changelog = `## [${version}] - ${date}\n\n`;
  
  if (changes.length === 0) {
    changelog += '- ÁÑ°ËÆäÊõ¥Ë®òÈåÑ\n\n';
    return changelog;
  }
  
  // ÂàÜÈ°ûËÆäÊõ¥
  const categories = {
    feat: { title: 'Êñ∞ÂäüËÉΩ', items: [] },
    fix: { title: 'ÈåØË™§‰øÆÂæ©', items: [] },
    docs: { title: 'ÊñáÊ™î', items: [] },
    style: { title: 'Ê®£Âºè', items: [] },
    refactor: { title: 'ÈáçÊßã', items: [] },
    perf: { title: 'ÊÄßËÉΩÂÑ™Âåñ', items: [] },
    test: { title: 'Ê∏¨Ë©¶', items: [] },
    chore: { title: 'ÂÖ∂‰ªñ', items: [] },
  };
  
  changes.forEach(change => {
    const message = change.message;
    let category = 'chore';
    
    // Ê™¢Ê∏¨Êèê‰∫§È°ûÂûã
    const match = message.match(/^(feat|fix|docs|style|refactor|perf|test|chore)(\(.+\))?\s*:\s*(.+)$/);
    if (match) {
      category = match[1];
      change.cleanMessage = match[3];
    } else {
      change.cleanMessage = message;
    }
    
    categories[category].items.push(change);
  });
  
  // ÁîüÊàêËÆäÊõ¥Êó•Ë™åÂÖßÂÆπ
  Object.entries(categories).forEach(([key, category]) => {
    if (category.items.length > 0) {
      changelog += `### ${category.title}\n\n`;
      category.items.forEach(item => {
        changelog += `- ${item.cleanMessage} (${item.hash})\n`;
      });
      changelog += '\n';
    }
  });
  
  return changelog;
}

/**
 * Êõ¥Êñ∞ËÆäÊõ¥Êó•Ë™åÊñá‰ª∂
 */
function updateChangelogFile(newContent) {
  let existingContent = '';
  
  if (fs.existsSync(CONFIG.changelogPath)) {
    existingContent = fs.readFileSync(CONFIG.changelogPath, 'utf8');
  } else {
    existingContent = '# ËÆäÊõ¥Êó•Ë™å\n\nÊâÄÊúâÈáçË¶ÅËÆäÊõ¥ÈÉΩÊúÉË®òÈåÑÂú®Ê≠§Êñá‰ª∂‰∏≠„ÄÇ\n\n';
  }
  
  // Âú®ÁèæÊúâÂÖßÂÆπÂâçÊèíÂÖ•Êñ∞ÁöÑËÆäÊõ¥Êó•Ë™å
  const lines = existingContent.split('\n');
  const insertIndex = lines.findIndex(line => line.startsWith('## [')) || lines.length;
  
  lines.splice(insertIndex, 0, newContent);
  
  const updatedContent = lines.join('\n');
  fs.writeFileSync(CONFIG.changelogPath, updatedContent);
}

/**
 * ÂâµÂª∫ÁâàÊú¨ÂÇô‰ªΩ
 */
function createVersionBackup(version, packageData) {
  if (!fs.existsSync(CONFIG.versionsDir)) {
    fs.mkdirSync(CONFIG.versionsDir, { recursive: true });
  }
  
  const backupData = {
    version,
    timestamp: new Date().toISOString(),
    packageJson: packageData,
    git: {
      branch: execGit('rev-parse --abbrev-ref HEAD'),
      commit: execGit('rev-parse HEAD'),
      tag: `v${version}`,
    },
  };
  
  const backupPath = path.join(CONFIG.versionsDir, `${version}.json`);
  fs.writeFileSync(backupPath, JSON.stringify(backupData, null, 2));
  
  Logger.info(`ÁâàÊú¨ÂÇô‰ªΩÂ∑≤ÂâµÂª∫: ${backupPath}`);
}

/**
 * ÁôºÂ∏ÉÁâàÊú¨
 */
function releaseVersion(type = 'patch', message = null) {
  try {
    Logger.info(`üöÄ ÈñãÂßãÁôºÂ∏É ${type} ÁâàÊú¨...`);
    
    // Ê™¢Êü• Git ÁãÄÊÖã
    const status = execGit('status --porcelain');
    if (status) {
      Logger.warn('Â∑•‰ΩúÁõÆÈåÑÊúâÊú™Êèê‰∫§ÁöÑËÆäÊõ¥:');
      console.log(status);
      
      const answer = process.argv.includes('--force') ? 'y' : 'n';
      if (answer !== 'y') {
        Logger.error('Ë´ãÂÖàÊèê‰∫§ÊàñÊö´Â≠òËÆäÊõ¥ÔºåÊàñ‰ΩøÁî® --force Âº∑Âà∂ÁôºÂ∏É');
        process.exit(1);
      }
    }
    
    // ËÆÄÂèñÁï∂ÂâçÁâàÊú¨
    const packageData = readPackageJson();
    const currentVersion = packageData.version;
    const newVersion = bumpVersion(currentVersion, type);
    
    Logger.info(`ÁâàÊú¨Ëôü: ${currentVersion} -> ${newVersion}`);
    
    // Áç≤ÂèñËÆäÊõ¥
    const lastTag = `v${currentVersion}`;
    const changes = getGitChanges(lastTag);
    Logger.info(`ÁôºÁèæ ${changes.length} ÂÄãËÆäÊõ¥`);
    
    // Êõ¥Êñ∞ package.json
    packageData.version = newVersion;
    writePackageJson(packageData);
    Logger.success('package.json Â∑≤Êõ¥Êñ∞');
    
    // ÁîüÊàêËÆäÊõ¥Êó•Ë™å
    const changelogContent = generateChangelog(newVersion, changes);
    updateChangelogFile(changelogContent);
    Logger.success('ËÆäÊõ¥Êó•Ë™åÂ∑≤Êõ¥Êñ∞');
    
    // ÂâµÂª∫ÁâàÊú¨ÂÇô‰ªΩ
    createVersionBackup(newVersion, packageData);
    
    // Git Êèê‰∫§ÂíåÊ®ôÁ±§
    const commitMessage = message || `chore: release v${newVersion}`;
    execGit('add .');
    execGit(`commit -m "${commitMessage}"`);
    execGit(`tag -a v${newVersion} -m "Release v${newVersion}"`);
    
    Logger.success(`‚ú® ÁâàÊú¨ v${newVersion} ÁôºÂ∏ÉÊàêÂäüÔºÅ`);
    Logger.info('‰∏ã‰∏ÄÊ≠•:');
    Logger.info('  git push origin main');
    Logger.info(`  git push origin v${newVersion}`);
    
    return newVersion;
    
  } catch (error) {
    Logger.error('ÁâàÊú¨ÁôºÂ∏ÉÂ§±Êïó:', error.message);
    process.exit(1);
  }
}

/**
 * ‰∏ªÂáΩÊï∏
 */
function main() {
  const args = process.argv.slice(2);
  const command = args[0];
  
  switch (command) {
    case 'release':
      const type = args[1] || 'patch';
      const message = args.find(arg => arg.startsWith('--message='))?.split('=')[1];
      releaseVersion(type, message);
      break;
      
    case 'current':
      const packageData = readPackageJson();
      console.log(packageData.version);
      break;
      
    case 'changelog':
      const version = args[1] || readPackageJson().version;
      const changes = getGitChanges(`v${version}`);
      const changelog = generateChangelog(version, changes);
      console.log(changelog);
      break;
      
    default:
      console.log('Áî®Ê≥ï:');
      console.log('  node version-manager.js release [major|minor|patch|prerelease] [--message="Êèê‰∫§‰ø°ÊÅØ"] [--force]');
      console.log('  node version-manager.js current');
      console.log('  node version-manager.js changelog [version]');
      break;
  }
}

// Âü∑Ë°å‰∏ªÂáΩÊï∏
const isMainModule = process.argv[1] && process.argv[1].endsWith('version-manager.js');
if (isMainModule) {
  main();
}

export { releaseVersion, bumpVersion, generateChangelog };
