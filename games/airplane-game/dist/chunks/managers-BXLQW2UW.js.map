{"version":3,"file":"managers-BXLQW2UW.js","sources":["../../src/managers/GEPTManager.ts","../../src/managers/CollisionDetectionSystem.ts","../../src/managers/MemoryEnhancementEngine.ts"],"sourcesContent":["/**\r\n * GEPTManager - GEPT分級和內容模板管理系統\r\n * 遷移到 Vite + Phaser 3 專案\r\n */\r\n\r\nexport type GEPTLevel = 'elementary' | 'intermediate' | 'high-intermediate';\r\n\r\nexport interface GEPTWord {\r\n  id: string;\r\n  english: string;\r\n  chinese: string;\r\n  level: GEPTLevel;\r\n  frequency: number; // 使用頻率 1-100\r\n  difficulty?: number; // 難度 1-10\r\n  partOfSpeech?: string;\r\n  pronunciation?: string;\r\n  category?: string;\r\n}\r\n\r\nexport interface ValidationResult {\r\n  isValid: boolean;\r\n  errors: ValidationError[];\r\n  warnings: ValidationWarning[];\r\n  suggestions: string[];\r\n  geptCompliance: {\r\n    level: GEPTLevel;\r\n    score: number; // 0-100\r\n    issues: string[];\r\n  };\r\n}\r\n\r\nexport interface ValidationError {\r\n  type: 'grammar' | 'spelling' | 'format' | 'gept-compliance';\r\n  message: string;\r\n  position?: { start: number; end: number };\r\n  severity: 'error' | 'warning' | 'info';\r\n  suggestion?: string;\r\n}\r\n\r\nexport interface ValidationWarning {\r\n  type: 'complexity' | 'vocabulary' | 'structure';\r\n  message: string;\r\n  suggestion: string;\r\n}\r\n\r\n/**\r\n * GEPT 管理器類\r\n */\r\nexport class GEPTManager {\r\n  private wordDatabase: Map<GEPTLevel, GEPTWord[]> = new Map();\r\n  private currentLevel: GEPTLevel = 'elementary';\r\n\r\n  constructor() {\r\n    this.initializeWordDatabase();\r\n  }\r\n\r\n  /**\r\n   * 初始化詞彙數據庫\r\n   */\r\n  private initializeWordDatabase(): void {\r\n    // Elementary 級別詞彙\r\n    const elementaryWords: GEPTWord[] = [\r\n      { id: '1', english: 'hello', chinese: '你好', level: 'elementary', frequency: 100 },\r\n      { id: '2', english: 'world', chinese: '世界', level: 'elementary', frequency: 95 },\r\n      { id: '3', english: 'book', chinese: '書', level: 'elementary', frequency: 90 },\r\n      { id: '4', english: 'school', chinese: '學校', level: 'elementary', frequency: 85 },\r\n      { id: '5', english: 'friend', chinese: '朋友', level: 'elementary', frequency: 80 },\r\n      { id: '6', english: 'family', chinese: '家庭', level: 'elementary', frequency: 85 },\r\n      { id: '7', english: 'house', chinese: '房子', level: 'elementary', frequency: 82 },\r\n      { id: '8', english: 'water', chinese: '水', level: 'elementary', frequency: 88 },\r\n      { id: '9', english: 'food', chinese: '食物', level: 'elementary', frequency: 86 },\r\n      { id: '10', english: 'time', chinese: '時間', level: 'elementary', frequency: 92 }\r\n    ];\r\n\r\n    // Intermediate 級別詞彙\r\n    const intermediateWords: GEPTWord[] = [\r\n      { id: '11', english: 'environment', chinese: '環境', level: 'intermediate', frequency: 75 },\r\n      { id: '12', english: 'technology', chinese: '技術', level: 'intermediate', frequency: 78 },\r\n      { id: '13', english: 'education', chinese: '教育', level: 'intermediate', frequency: 80 },\r\n      { id: '14', english: 'government', chinese: '政府', level: 'intermediate', frequency: 72 },\r\n      { id: '15', english: 'economy', chinese: '經濟', level: 'intermediate', frequency: 70 }\r\n    ];\r\n\r\n    // High-Intermediate 級別詞彙\r\n    const highIntermediateWords: GEPTWord[] = [\r\n      { id: '16', english: 'sophisticated', chinese: '複雜的', level: 'high-intermediate', frequency: 60 },\r\n      { id: '17', english: 'phenomenon', chinese: '現象', level: 'high-intermediate', frequency: 58 },\r\n      { id: '18', english: 'hypothesis', chinese: '假設', level: 'high-intermediate', frequency: 55 },\r\n      { id: '19', english: 'methodology', chinese: '方法論', level: 'high-intermediate', frequency: 52 },\r\n      { id: '20', english: 'comprehensive', chinese: '全面的', level: 'high-intermediate', frequency: 65 }\r\n    ];\r\n\r\n    this.wordDatabase.set('elementary', elementaryWords);\r\n    this.wordDatabase.set('intermediate', intermediateWords);\r\n    this.wordDatabase.set('high-intermediate', highIntermediateWords);\r\n\r\n    console.log('📚 GEPT 詞彙數據庫初始化完成');\r\n  }\r\n\r\n  /**\r\n   * 設置當前 GEPT 等級\r\n   */\r\n  setLevel(level: GEPTLevel): void {\r\n    this.currentLevel = level;\r\n    console.log(`📊 設置 GEPT 等級: ${level}`);\r\n  }\r\n\r\n  /**\r\n   * 獲取當前等級\r\n   */\r\n  getCurrentLevel(): GEPTLevel {\r\n    return this.currentLevel;\r\n  }\r\n\r\n  /**\r\n   * 獲取指定等級的詞彙\r\n   */\r\n  getWordsForLevel(level: GEPTLevel): GEPTWord[] {\r\n    return this.wordDatabase.get(level) || [];\r\n  }\r\n\r\n  /**\r\n   * 獲取當前等級的詞彙\r\n   */\r\n  getCurrentLevelWords(): GEPTWord[] {\r\n    return this.getWordsForLevel(this.currentLevel);\r\n  }\r\n\r\n  /**\r\n   * 獲取隨機詞彙\r\n   */\r\n  getRandomWord(level?: GEPTLevel): GEPTWord | null {\r\n    const targetLevel = level || this.currentLevel;\r\n    const words = this.getWordsForLevel(targetLevel);\r\n    \r\n    if (words.length === 0) {\r\n      console.warn(`⚠️ 沒有找到 ${targetLevel} 等級的詞彙`);\r\n      return null;\r\n    }\r\n\r\n    const randomIndex = Math.floor(Math.random() * words.length);\r\n    return words[randomIndex];\r\n  }\r\n\r\n  /**\r\n   * 獲取多個隨機詞彙\r\n   */\r\n  getRandomWords(count: number, level?: GEPTLevel): GEPTWord[] {\r\n    const targetLevel = level || this.currentLevel;\r\n    const words = this.getWordsForLevel(targetLevel);\r\n    \r\n    if (words.length === 0) return [];\r\n\r\n    const shuffled = [...words].sort(() => 0.5 - Math.random());\r\n    return shuffled.slice(0, Math.min(count, words.length));\r\n  }\r\n\r\n  /**\r\n   * 根據 ID 查找詞彙\r\n   */\r\n  findWordById(id: string): GEPTWord | null {\r\n    for (const [level, words] of this.wordDatabase) {\r\n      const word = words.find(w => w.id === id);\r\n      if (word) return word;\r\n    }\r\n    return null;\r\n  }\r\n\r\n  /**\r\n   * 根據英文單字查找詞彙\r\n   */\r\n  findWordByEnglish(english: string): GEPTWord | null {\r\n    for (const [level, words] of this.wordDatabase) {\r\n      const word = words.find(w => w.english.toLowerCase() === english.toLowerCase());\r\n      if (word) return word;\r\n    }\r\n    return null;\r\n  }\r\n\r\n  /**\r\n   * 驗證詞彙是否符合 GEPT 標準\r\n   */\r\n  validateWord(word: string, level: GEPTLevel): ValidationResult {\r\n    const foundWord = this.findWordByEnglish(word);\r\n    \r\n    if (!foundWord) {\r\n      return {\r\n        isValid: false,\r\n        errors: [{\r\n          type: 'gept-compliance',\r\n          message: `詞彙 \"${word}\" 不在 GEPT ${level} 詞彙表中`,\r\n          severity: 'error',\r\n          suggestion: '請使用 GEPT 標準詞彙'\r\n        }],\r\n        warnings: [],\r\n        suggestions: [],\r\n        geptCompliance: {\r\n          level,\r\n          score: 0,\r\n          issues: [`詞彙 \"${word}\" 未找到`]\r\n        }\r\n      };\r\n    }\r\n\r\n    const isCorrectLevel = foundWord.level === level;\r\n    \r\n    return {\r\n      isValid: isCorrectLevel,\r\n      errors: isCorrectLevel ? [] : [{\r\n        type: 'gept-compliance',\r\n        message: `詞彙 \"${word}\" 屬於 ${foundWord.level} 等級，不符合 ${level} 等級要求`,\r\n        severity: 'warning',\r\n        suggestion: `建議使用 ${level} 等級詞彙`\r\n      }],\r\n      warnings: [],\r\n      suggestions: [],\r\n      geptCompliance: {\r\n        level: foundWord.level,\r\n        score: isCorrectLevel ? 100 : 50,\r\n        issues: isCorrectLevel ? [] : [`等級不匹配: ${foundWord.level} vs ${level}`]\r\n      }\r\n    };\r\n  }\r\n\r\n  /**\r\n   * 獲取詞彙統計信息\r\n   */\r\n  getStatistics(): { [key in GEPTLevel]: number } {\r\n    return {\r\n      elementary: this.wordDatabase.get('elementary')?.length || 0,\r\n      intermediate: this.wordDatabase.get('intermediate')?.length || 0,\r\n      'high-intermediate': this.wordDatabase.get('high-intermediate')?.length || 0\r\n    };\r\n  }\r\n\r\n  /**\r\n   * 添加新詞彙\r\n   */\r\n  addWord(word: GEPTWord): boolean {\r\n    const words = this.wordDatabase.get(word.level);\r\n    if (!words) return false;\r\n\r\n    // 檢查是否已存在\r\n    const exists = words.some(w => w.english.toLowerCase() === word.english.toLowerCase());\r\n    if (exists) {\r\n      console.warn(`⚠️ 詞彙 \"${word.english}\" 已存在`);\r\n      return false;\r\n    }\r\n\r\n    words.push(word);\r\n    console.log(`✅ 添加詞彙: ${word.english} (${word.level})`);\r\n    return true;\r\n  }\r\n}\r\n","/**\r\n * 碰撞檢測系統 - Vite + Phaser 3 版本\r\n * 負責處理飛機與雲朵的碰撞檢測、特效觸發和學習數據記錄\r\n */\r\n\r\nimport Phaser from 'phaser';\r\nimport { GEPTWord, GEPTLevel } from './GEPTManager';\r\n\r\nexport interface CollisionEvent {\r\n  type: 'correct' | 'incorrect' | 'neutral';\r\n  cloudWord: string;\r\n  targetWord: string;\r\n  responseTime: number;\r\n  timestamp: number;\r\n  playerPosition: { x: number; y: number };\r\n  cloudPosition: { x: number; y: number };\r\n}\r\n\r\nexport interface CollisionEffectConfig {\r\n  enableParticles: boolean;\r\n  enableScreenShake: boolean;\r\n  enableSoundEffects: boolean;\r\n  enableVisualFeedback: boolean;\r\n  particleIntensity: 'low' | 'medium' | 'high';\r\n  soundVolume: number;\r\n}\r\n\r\n/**\r\n * 碰撞檢測系統\r\n */\r\nexport class CollisionDetectionSystem {\r\n  private scene: Phaser.Scene;\r\n  private geptLevel: GEPTLevel;\r\n  private effectConfig: CollisionEffectConfig;\r\n\r\n  // 目標詞彙管理\r\n  private targetEnglishWord: string = '';\r\n  private targetChineseWord: string = '';\r\n  private targetSetTime: number = 0;\r\n\r\n  // 統計數據\r\n  private collisionHistory: CollisionEvent[] = [];\r\n  private correctCollisions: number = 0;\r\n  private incorrectCollisions: number = 0;\r\n\r\n  // 特效系統\r\n  private particles?: Phaser.GameObjects.Particles.ParticleEmitter;\r\n  private screenShakeIntensity: number = 0;\r\n\r\n  constructor(\r\n    scene: Phaser.Scene,\r\n    geptLevel: GEPTLevel,\r\n    effectConfig: CollisionEffectConfig\r\n  ) {\r\n    this.scene = scene;\r\n    this.geptLevel = geptLevel;\r\n    this.effectConfig = effectConfig;\r\n    \r\n    this.initializeEffectSystems();\r\n    console.log('🎯 碰撞檢測系統初始化完成');\r\n  }\r\n\r\n  /**\r\n   * 初始化特效系統\r\n   */\r\n  private initializeEffectSystems(): void {\r\n    if (this.effectConfig.enableParticles) {\r\n      this.initializeParticleSystem();\r\n    }\r\n  }\r\n\r\n  /**\r\n   * 初始化粒子系統\r\n   */\r\n  private initializeParticleSystem(): void {\r\n    // 創建粒子紋理\r\n    const graphics = this.scene.add.graphics();\r\n    graphics.fillStyle(0xffffff);\r\n    graphics.fillCircle(4, 4, 4);\r\n    graphics.generateTexture('particle', 8, 8);\r\n    graphics.destroy();\r\n\r\n    console.log('✨ 粒子系統初始化完成');\r\n  }\r\n\r\n  /**\r\n   * 設置目標詞彙\r\n   */\r\n  setTargetWord(englishWord: string, chineseWord: string): void {\r\n    this.targetEnglishWord = englishWord;\r\n    this.targetChineseWord = chineseWord;\r\n    this.targetSetTime = Date.now();\r\n    \r\n    console.log(`🎯 設置目標詞彙: ${englishWord} (${chineseWord})`);\r\n  }\r\n\r\n  /**\r\n   * 處理碰撞事件\r\n   */\r\n  handleCollision(\r\n    player: Phaser.GameObjects.GameObject,\r\n    cloud: Phaser.GameObjects.GameObject,\r\n    cloudWord: GEPTWord\r\n  ): CollisionEvent {\r\n    const currentTime = Date.now();\r\n    const responseTime = currentTime - this.targetSetTime;\r\n    \r\n    // 判斷碰撞類型\r\n    const isCorrect = cloudWord.english === this.targetEnglishWord;\r\n    const collisionType: 'correct' | 'incorrect' = isCorrect ? 'correct' : 'incorrect';\r\n    \r\n    // 創建碰撞事件\r\n    const collisionEvent: CollisionEvent = {\r\n      type: collisionType,\r\n      cloudWord: cloudWord.english,\r\n      targetWord: this.targetEnglishWord,\r\n      responseTime,\r\n      timestamp: currentTime,\r\n      playerPosition: { x: (player as any).x, y: (player as any).y },\r\n      cloudPosition: { x: (cloud as any).x, y: (cloud as any).y }\r\n    };\r\n\r\n    // 記錄統計\r\n    if (isCorrect) {\r\n      this.correctCollisions++;\r\n    } else {\r\n      this.incorrectCollisions++;\r\n    }\r\n    \r\n    this.collisionHistory.push(collisionEvent);\r\n\r\n    // 觸發特效\r\n    this.triggerCollisionEffects(collisionEvent, cloud as any);\r\n\r\n    console.log(`💥 碰撞處理: ${cloudWord.english} - ${collisionType}`);\r\n    \r\n    return collisionEvent;\r\n  }\r\n\r\n  /**\r\n   * 觸發碰撞特效 - 優化版本，減少閃爍\r\n   */\r\n  private triggerCollisionEffects(\r\n    event: CollisionEvent,\r\n    cloud: Phaser.GameObjects.GameObject\r\n  ): void {\r\n    const { x, y } = event.cloudPosition;\r\n\r\n    // 視覺反饋 - 所有碰撞都顯示\r\n    if (this.effectConfig.enableVisualFeedback && event.type !== 'neutral') {\r\n      this.createVisualFeedback(event.type, x, y);\r\n    }\r\n\r\n    // 根據碰撞類型選擇性觸發特效，減少閃爍\r\n    if (event.type === 'correct') {\r\n      // 正確碰撞：只顯示粒子特效和音效，不震動\r\n      if (this.effectConfig.enableParticles) {\r\n        this.createParticleEffect(event.type, x, y);\r\n      }\r\n      if (this.effectConfig.enableSoundEffects) {\r\n        this.playSoundEffect(event.type);\r\n      }\r\n      console.log('✅ 正確碰撞：溫和特效');\r\n    } else if (event.type === 'incorrect') {\r\n      // 錯誤碰撞：輕微震動 + 粒子特效 + 音效\r\n      if (this.effectConfig.enableParticles) {\r\n        this.createParticleEffect(event.type, x, y);\r\n      }\r\n      if (this.effectConfig.enableScreenShake) {\r\n        this.triggerScreenShake(event.type);\r\n      }\r\n      if (this.effectConfig.enableSoundEffects) {\r\n        this.playSoundEffect(event.type);\r\n      }\r\n      console.log('❌ 錯誤碰撞：輕微震動特效');\r\n    }\r\n  }\r\n\r\n  /**\r\n   * 創建視覺反饋\r\n   */\r\n  private createVisualFeedback(type: 'correct' | 'incorrect', x: number, y: number): void {\r\n    const color = type === 'correct' ? '#00ff00' : '#ff0000';\r\n    const text = type === 'correct' ? '✓' : '✗';\r\n    \r\n    const feedback = this.scene.add.text(x, y, text, {\r\n      fontSize: '32px',\r\n      color: color,\r\n      fontStyle: 'bold'\r\n    }).setOrigin(0.5);\r\n\r\n    // 動畫效果\r\n    this.scene.tweens.add({\r\n      targets: feedback,\r\n      y: y - 50,\r\n      alpha: 0,\r\n      scale: 1.5,\r\n      duration: 1000,\r\n      ease: 'Power2',\r\n      onComplete: () => feedback.destroy()\r\n    });\r\n  }\r\n\r\n  /**\r\n   * 創建粒子特效\r\n   */\r\n  private createParticleEffect(type: 'correct' | 'incorrect', x: number, y: number): void {\r\n    const color = type === 'correct' ? 0x00ff00 : 0xff0000;\r\n    const particleCount = this.getParticleCount();\r\n\r\n    // 創建臨時粒子發射器\r\n    const emitter = this.scene.add.particles(x, y, 'particle', {\r\n      speed: { min: 50, max: 150 },\r\n      scale: { start: 0.5, end: 0 },\r\n      tint: color,\r\n      lifespan: 500,\r\n      quantity: particleCount\r\n    });\r\n\r\n    // 自動清理\r\n    this.scene.time.delayedCall(1000, () => {\r\n      emitter.destroy();\r\n    });\r\n  }\r\n\r\n  /**\r\n   * 獲取粒子數量\r\n   */\r\n  private getParticleCount(): number {\r\n    switch (this.effectConfig.particleIntensity) {\r\n      case 'low': return 5;\r\n      case 'medium': return 10;\r\n      case 'high': return 20;\r\n      default: return 10;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * 觸發螢幕震動 - 優化版本，減少閃爍\r\n   */\r\n  private triggerScreenShake(type: 'correct' | 'incorrect'): void {\r\n    // 大幅降低震動強度和持續時間以減少閃爍\r\n    const intensity = type === 'correct' ? 1 : 3;  // 從 5/10 降低到 1/3\r\n    const duration = type === 'correct' ? 100 : 200;  // 從 200/400 降低到 100/200\r\n\r\n    // 簡單的相機震動效果\r\n    if (this.scene.cameras.main) {\r\n      this.scene.cameras.main.shake(duration, intensity);\r\n      console.log(`📳 觸發${type === 'correct' ? '輕微' : '溫和'}震動 (強度: ${intensity}, 時長: ${duration}ms)`);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * 播放音效\r\n   */\r\n  private playSoundEffect(type: 'correct' | 'incorrect'): void {\r\n    // 這裡可以添加音效播放邏輯\r\n    // 目前只記錄日誌\r\n    const soundType = type === 'correct' ? '正確音效' : '錯誤音效';\r\n    console.log(`🔊 播放${soundType} (音量: ${this.effectConfig.soundVolume})`);\r\n  }\r\n\r\n  /**\r\n   * 獲取統計數據\r\n   */\r\n  getStatistics(): {\r\n    correctCollisions: number;\r\n    incorrectCollisions: number;\r\n    totalCollisions: number;\r\n    accuracy: number;\r\n    averageResponseTime: number;\r\n  } {\r\n    const totalCollisions = this.correctCollisions + this.incorrectCollisions;\r\n    const accuracy = totalCollisions > 0 ? (this.correctCollisions / totalCollisions) * 100 : 0;\r\n    \r\n    const totalResponseTime = this.collisionHistory.reduce((sum, event) => sum + event.responseTime, 0);\r\n    const averageResponseTime = this.collisionHistory.length > 0 ? totalResponseTime / this.collisionHistory.length : 0;\r\n\r\n    return {\r\n      correctCollisions: this.correctCollisions,\r\n      incorrectCollisions: this.incorrectCollisions,\r\n      totalCollisions,\r\n      accuracy: Math.round(accuracy * 100) / 100,\r\n      averageResponseTime: Math.round(averageResponseTime)\r\n    };\r\n  }\r\n\r\n  /**\r\n   * 獲取碰撞歷史\r\n   */\r\n  getCollisionHistory(): CollisionEvent[] {\r\n    return [...this.collisionHistory];\r\n  }\r\n\r\n  /**\r\n   * 重置統計數據\r\n   */\r\n  resetStatistics(): void {\r\n    this.correctCollisions = 0;\r\n    this.incorrectCollisions = 0;\r\n    this.collisionHistory = [];\r\n    console.log('📊 碰撞統計數據已重置');\r\n  }\r\n\r\n  /**\r\n   * 更新配置\r\n   */\r\n  updateConfig(newConfig: Partial<CollisionEffectConfig>): void {\r\n    this.effectConfig = { ...this.effectConfig, ...newConfig };\r\n    console.log('⚙️ 碰撞檢測配置已更新');\r\n  }\r\n\r\n  /**\r\n   * 銷毀系統\r\n   */\r\n  destroy(): void {\r\n    if (this.particles) {\r\n      this.particles.destroy();\r\n    }\r\n    this.collisionHistory = [];\r\n    console.log('🗑️ 碰撞檢測系統已銷毀');\r\n  }\r\n}\r\n","/**\r\n * 記憶增強引擎 - Vite + Phaser 3 版本\r\n * 基於記憶科學原理的學習效果優化系統\r\n */\r\n\r\nexport interface MemoryType {\r\n  id: string;\r\n  name: string;\r\n  description: string;\r\n  cognitiveLoad: 'low' | 'medium' | 'high';\r\n  memorySystem: 'working' | 'short-term' | 'long-term' | 'procedural' | 'episodic';\r\n  neuralBasis: string[];\r\n  enhancementStrategies: string[];\r\n}\r\n\r\nexport interface MemoryConfiguration {\r\n  primaryMemoryType: string;\r\n  secondaryMemoryTypes: string[];\r\n  difficultyLevel: number; // 1-5\r\n  timeConstraints: {\r\n    enabled: boolean;\r\n    duration: number; // seconds\r\n    pressureLevel: 'low' | 'medium' | 'high';\r\n  };\r\n  repetitionSettings: {\r\n    spacedRepetition: boolean;\r\n    intervalMultiplier: number;\r\n    maxRepetitions: number;\r\n  };\r\n  feedbackMechanisms: {\r\n    immediate: boolean;\r\n    delayed: boolean;\r\n    explanatory: boolean;\r\n    emotional: boolean;\r\n  };\r\n}\r\n\r\nexport interface MemoryMetrics {\r\n  retentionRate: number; // 0-100\r\n  recallSpeed: number; // milliseconds\r\n  errorRate: number; // 0-100\r\n  cognitiveLoad: number; // 1-10\r\n  engagementLevel: number; // 1-10\r\n  learningEfficiency: number; // 0-100\r\n}\r\n\r\nexport interface LearningEvent {\r\n  wordId: string;\r\n  word: string;\r\n  timestamp: number;\r\n  responseTime: number;\r\n  isCorrect: boolean;\r\n  attemptNumber: number;\r\n  contextData: any;\r\n}\r\n\r\n/**\r\n * 記憶增強引擎\r\n */\r\nexport class MemoryEnhancementEngine {\r\n  private memoryTypes: Map<string, MemoryType> = new Map();\r\n  private currentConfiguration: MemoryConfiguration;\r\n  private learningHistory: LearningEvent[] = [];\r\n  private memoryMetrics: MemoryMetrics;\r\n\r\n  constructor() {\r\n    this.initializeMemoryTypes();\r\n    this.currentConfiguration = this.getDefaultConfiguration();\r\n    this.memoryMetrics = this.getInitialMetrics();\r\n    \r\n    console.log('🧠 記憶增強引擎初始化完成');\r\n  }\r\n\r\n  /**\r\n   * 初始化記憶類型\r\n   */\r\n  private initializeMemoryTypes(): void {\r\n    const memoryTypes: MemoryType[] = [\r\n      {\r\n        id: 'spatial-visual',\r\n        name: '空間視覺記憶',\r\n        description: '基於空間位置和視覺特徵的記憶',\r\n        cognitiveLoad: 'medium',\r\n        memorySystem: 'working',\r\n        neuralBasis: ['視覺皮層', '頂葉皮層'],\r\n        enhancementStrategies: ['空間配置', '顏色編碼', '視覺提示']\r\n      },\r\n      {\r\n        id: 'collision-reaction',\r\n        name: '碰撞反應記憶',\r\n        description: '基於動作反應的程序性記憶',\r\n        cognitiveLoad: 'high',\r\n        memorySystem: 'procedural',\r\n        neuralBasis: ['小腦', '基底神經節'],\r\n        enhancementStrategies: ['重複練習', '即時反饋', '肌肉記憶']\r\n      },\r\n      {\r\n        id: 'vocabulary-association',\r\n        name: '詞彙關聯記憶',\r\n        description: '基於語義關聯的長期記憶',\r\n        cognitiveLoad: 'medium',\r\n        memorySystem: 'long-term',\r\n        neuralBasis: ['海馬體', '顳葉皮層'],\r\n        enhancementStrategies: ['語義連結', '情境學習', '間隔重複']\r\n      }\r\n    ];\r\n\r\n    memoryTypes.forEach(type => {\r\n      this.memoryTypes.set(type.id, type);\r\n    });\r\n  }\r\n\r\n  /**\r\n   * 獲取默認配置\r\n   */\r\n  private getDefaultConfiguration(): MemoryConfiguration {\r\n    return {\r\n      primaryMemoryType: 'collision-reaction',\r\n      secondaryMemoryTypes: ['spatial-visual', 'vocabulary-association'],\r\n      difficultyLevel: 3,\r\n      timeConstraints: {\r\n        enabled: true,\r\n        duration: 5,\r\n        pressureLevel: 'medium'\r\n      },\r\n      repetitionSettings: {\r\n        spacedRepetition: true,\r\n        intervalMultiplier: 2,\r\n        maxRepetitions: 5\r\n      },\r\n      feedbackMechanisms: {\r\n        immediate: true,\r\n        delayed: false,\r\n        explanatory: true,\r\n        emotional: true\r\n      }\r\n    };\r\n  }\r\n\r\n  /**\r\n   * 獲取初始指標\r\n   */\r\n  private getInitialMetrics(): MemoryMetrics {\r\n    return {\r\n      retentionRate: 0,\r\n      recallSpeed: 0,\r\n      errorRate: 0,\r\n      cognitiveLoad: 5,\r\n      engagementLevel: 8,\r\n      learningEfficiency: 0\r\n    };\r\n  }\r\n\r\n  /**\r\n   * 記錄學習事件\r\n   */\r\n  recordLearningEvent(event: LearningEvent): void {\r\n    this.learningHistory.push(event);\r\n    this.updateMetrics();\r\n    \r\n    console.log(`📝 記錄學習事件: ${event.word} - ${event.isCorrect ? '正確' : '錯誤'}`);\r\n  }\r\n\r\n  /**\r\n   * 更新記憶指標\r\n   */\r\n  private updateMetrics(): void {\r\n    if (this.learningHistory.length === 0) return;\r\n\r\n    const recentEvents = this.learningHistory.slice(-20); // 最近20個事件\r\n    \r\n    // 計算保持率\r\n    const correctEvents = recentEvents.filter(e => e.isCorrect);\r\n    this.memoryMetrics.retentionRate = (correctEvents.length / recentEvents.length) * 100;\r\n\r\n    // 計算平均反應時間\r\n    const totalResponseTime = recentEvents.reduce((sum, e) => sum + e.responseTime, 0);\r\n    this.memoryMetrics.recallSpeed = totalResponseTime / recentEvents.length;\r\n\r\n    // 計算錯誤率\r\n    this.memoryMetrics.errorRate = 100 - this.memoryMetrics.retentionRate;\r\n\r\n    // 計算學習效率\r\n    this.memoryMetrics.learningEfficiency = this.calculateLearningEfficiency();\r\n\r\n    console.log('📊 記憶指標已更新:', this.memoryMetrics);\r\n  }\r\n\r\n  /**\r\n   * 計算學習效率\r\n   */\r\n  private calculateLearningEfficiency(): number {\r\n    if (this.learningHistory.length < 5) return 0;\r\n\r\n    const recentEvents = this.learningHistory.slice(-10);\r\n    const firstHalf = recentEvents.slice(0, 5);\r\n    const secondHalf = recentEvents.slice(5);\r\n\r\n    const firstHalfAccuracy = firstHalf.filter(e => e.isCorrect).length / firstHalf.length;\r\n    const secondHalfAccuracy = secondHalf.filter(e => e.isCorrect).length / secondHalf.length;\r\n\r\n    const improvement = secondHalfAccuracy - firstHalfAccuracy;\r\n    return Math.max(0, Math.min(100, (improvement + 1) * 50));\r\n  }\r\n\r\n  /**\r\n   * 獲取個人化建議\r\n   */\r\n  getPersonalizedRecommendations(): string[] {\r\n    const recommendations: string[] = [];\r\n    const metrics = this.memoryMetrics;\r\n\r\n    if (metrics.retentionRate < 60) {\r\n      recommendations.push('建議增加重複練習頻率');\r\n      recommendations.push('考慮降低難度等級');\r\n    }\r\n\r\n    if (metrics.recallSpeed > 3000) {\r\n      recommendations.push('建議進行反應速度訓練');\r\n      recommendations.push('可以嘗試更多視覺提示');\r\n    }\r\n\r\n    if (metrics.errorRate > 40) {\r\n      recommendations.push('建議加強基礎詞彙練習');\r\n      recommendations.push('考慮使用更多記憶輔助工具');\r\n    }\r\n\r\n    if (metrics.learningEfficiency < 30) {\r\n      recommendations.push('建議調整學習策略');\r\n      recommendations.push('可以嘗試不同的記憶技巧');\r\n    }\r\n\r\n    return recommendations;\r\n  }\r\n\r\n  /**\r\n   * 獲取當前指標\r\n   */\r\n  getCurrentMetrics(): MemoryMetrics {\r\n    return { ...this.memoryMetrics };\r\n  }\r\n\r\n  /**\r\n   * 獲取學習歷史\r\n   */\r\n  getLearningHistory(): LearningEvent[] {\r\n    return [...this.learningHistory];\r\n  }\r\n\r\n  /**\r\n   * 更新配置\r\n   */\r\n  updateConfiguration(newConfig: Partial<MemoryConfiguration>): void {\r\n    this.currentConfiguration = { ...this.currentConfiguration, ...newConfig };\r\n    console.log('⚙️ 記憶增強配置已更新');\r\n  }\r\n\r\n  /**\r\n   * 獲取當前配置\r\n   */\r\n  getCurrentConfiguration(): MemoryConfiguration {\r\n    return { ...this.currentConfiguration };\r\n  }\r\n\r\n  /**\r\n   * 重置數據\r\n   */\r\n  reset(): void {\r\n    this.learningHistory = [];\r\n    this.memoryMetrics = this.getInitialMetrics();\r\n    console.log('🔄 記憶增強引擎已重置');\r\n  }\r\n\r\n  /**\r\n   * 獲取記憶類型信息\r\n   */\r\n  getMemoryType(id: string): MemoryType | undefined {\r\n    return this.memoryTypes.get(id);\r\n  }\r\n\r\n  /**\r\n   * 獲取所有記憶類型\r\n   */\r\n  getAllMemoryTypes(): MemoryType[] {\r\n    return Array.from(this.memoryTypes.values());\r\n  }\r\n}\r\n"],"names":["GEPTManager","constructor","__publicField","this","Map","initializeWordDatabase","wordDatabase","set","id","english","chinese","level","frequency","console","log","setLevel","currentLevel","getCurrentLevel","getWordsForLevel","get","getCurrentLevelWords","getRandomWord","targetLevel","words","length","warn","Math","floor","random","getRandomWords","count","sort","slice","min","findWordById","word","find","w","findWordByEnglish","toLowerCase","validateWord","foundWord","isValid","errors","type","message","severity","suggestion","warnings","suggestions","geptCompliance","score","issues","isCorrectLevel","getStatistics","elementary","intermediate","addWord","some","push","CollisionDetectionSystem","scene","geptLevel","effectConfig","initializeEffectSystems","enableParticles","initializeParticleSystem","graphics","add","fillStyle","fillCircle","generateTexture","destroy","setTargetWord","englishWord","chineseWord","targetEnglishWord","targetChineseWord","targetSetTime","Date","now","handleCollision","player","cloud","cloudWord","currentTime","responseTime","isCorrect","collisionType","collisionEvent","targetWord","timestamp","playerPosition","x","y","cloudPosition","correctCollisions","incorrectCollisions","collisionHistory","triggerCollisionEffects","event","enableVisualFeedback","createVisualFeedback","createParticleEffect","enableSoundEffects","playSoundEffect","enableScreenShake","triggerScreenShake","color","text","feedback","fontSize","fontStyle","setOrigin","tweens","targets","alpha","scale","duration","ease","onComplete","particleCount","getParticleCount","emitter","particles","speed","max","start","end","tint","lifespan","quantity","time","delayedCall","particleIntensity","intensity","cameras","main","shake","soundType","soundVolume","totalCollisions","accuracy","totalResponseTime","reduce","sum","averageResponseTime","round","getCollisionHistory","resetStatistics","updateConfig","newConfig","MemoryEnhancementEngine","initializeMemoryTypes","currentConfiguration","getDefaultConfiguration","memoryMetrics","getInitialMetrics","name","description","cognitiveLoad","memorySystem","neuralBasis","enhancementStrategies","forEach","memoryTypes","primaryMemoryType","secondaryMemoryTypes","difficultyLevel","timeConstraints","enabled","pressureLevel","repetitionSettings","spacedRepetition","intervalMultiplier","maxRepetitions","feedbackMechanisms","immediate","delayed","explanatory","emotional","retentionRate","recallSpeed","errorRate","engagementLevel","learningEfficiency","recordLearningEvent","learningHistory","updateMetrics","recentEvents","correctEvents","filter","e","calculateLearningEfficiency","firstHalf","secondHalf","firstHalfAccuracy","improvement","getPersonalizedRecommendations","recommendations","metrics","getCurrentMetrics","getLearningHistory","updateConfiguration","getCurrentConfiguration","reset","getMemoryType","getAllMemoryTypes","Array","from","values"],"mappings":"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"}